export type Transaction = unknown;

export class Table<T = any, Key = any> {
  put(value: T): Promise<Key>;
  bulkAdd(values: ReadonlyArray<T>): Promise<void>;
  where(field: string): { equals(value: unknown): { toArray(): Promise<T[]> } };
  delete(key: Key): Promise<void>;
  toArray(): Promise<T[]>;
}

export default class Dexie {
  constructor(name: string);
  readonly name: string;
  [key: string]: any;
  version(versionNumber: number): {
    stores(schema: Record<string, string>): this;
    upgrade(callback: (transaction: Transaction) => void | Promise<void>): this;
  };
  delete(): Promise<void>;
  static delete(name: string): Promise<void>;
}

export { Table };
