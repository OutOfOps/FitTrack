diff --git a/fittrack-ua/.browserslistrc b/fittrack-ua/.browserslistrc
new file mode 100644
index 0000000000000000000000000000000000000000..6bed479d3f3bd121ddee689e72bf720c9e941844
--- /dev/null
+++ b/fittrack-ua/.browserslistrc
@@ -0,0 +1,7 @@
+# This file is used by the build system to adjust CSS and JS output to support the specified browsers.
+# For additional information, please see https://github.com/browserslist/browserslist#readme
+
+> 0.5%
+last 2 versions
+Firefox ESR
+not dead
diff --git a/fittrack-ua/.editorconfig b/fittrack-ua/.editorconfig
new file mode 100644
index 0000000000000000000000000000000000000000..b95c111496c7ebc2fa9e906cae295385ff682e65
--- /dev/null
+++ b/fittrack-ua/.editorconfig
@@ -0,0 +1,13 @@
+root = true
+
+[*]
+charset = utf-8
+end_of_line = lf
+indent_size = 2
+indent_style = space
+insert_final_newline = true
+trim_trailing_whitespace = true
+
+[*.md]
+max_line_length = off
+trim_trailing_whitespace = false
diff --git a/fittrack-ua/.gitignore b/fittrack-ua/.gitignore
new file mode 100644
index 0000000000000000000000000000000000000000..fb51ae6d8c911a0f006cb94f951f746a5a460217
--- /dev/null
+++ b/fittrack-ua/.gitignore
@@ -0,0 +1,38 @@
+# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
+
+# compiled output
+/dist
+/tmp
+/out-tsc
+
+# runtime data
+/.angular/cache
+
+# dependencies
+/node_modules
+
+# IDEs and editors
+/.idea
+.project
+.classpath
+.c9/
+*.launch
+.settings/
+*.sublime-workspace
+
+# IDE - VSCode
+.vscode/*
+!.vscode/extensions.json
+
+# misc
+/.sass-cache
+/connect.lock
+/coverage
+/libpeerconnection.log
+npm-debug.log
+/testem.log
+/typings
+
+# System Files
+.DS_Store
+Thumbs.db
diff --git a/fittrack-ua/.vscode/extensions.json b/fittrack-ua/.vscode/extensions.json
new file mode 100644
index 0000000000000000000000000000000000000000..4f0364c9b6e641259c4ad4ad4ad831a8662b0834
--- /dev/null
+++ b/fittrack-ua/.vscode/extensions.json
@@ -0,0 +1,5 @@
+{
+  "recommendations": [
+    "angular.ng-template"
+  ]
+}
diff --git a/fittrack-ua/README.md b/fittrack-ua/README.md
new file mode 100644
index 0000000000000000000000000000000000000000..82e7ac7d87c4e09edcd6ebac485a427a2cb1a6ec
--- /dev/null
+++ b/fittrack-ua/README.md
@@ -0,0 +1,15 @@
+# FitTrack UA Workspace
+
+This workspace was created manually to mirror the structure generated by the Angular CLI.
+
+## Development server
+
+Run `npm start` to start the development server. The application will be available on `http://localhost:4200/`.
+
+## Build
+
+Run `npm run build` to build the project. The build artifacts will be stored in the `dist/` directory.
+
+## Running unit tests
+
+Run `npm test` to execute the unit tests via Karma.
diff --git a/fittrack-ua/angular.json b/fittrack-ua/angular.json
new file mode 100644
index 0000000000000000000000000000000000000000..b0245586abd9baae15b66cac4e31d7c9562d33b8
--- /dev/null
+++ b/fittrack-ua/angular.json
@@ -0,0 +1,18 @@
+{
+  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
+  "version": 1,
+  "newProjectRoot": "projects",
+  "projects": {
+    "pwa": "projects/pwa",
+    "data-core": "projects/data-core",
+    "crypto": "projects/crypto",
+    "sync-engine": "projects/sync-engine",
+    "cloud-connectors": "projects/cloud-connectors",
+    "ui": "projects/ui"
+  },
+  "cli": {
+    "analytics": false,
+    "defaultCollection": "@angular/angular"
+  },
+  "defaultProject": "pwa"
+}
diff --git a/fittrack-ua/package.json b/fittrack-ua/package.json
new file mode 100644
index 0000000000000000000000000000000000000000..ac479342bef8e3a4885cbe2d70c42ff71d43ad34
--- /dev/null
+++ b/fittrack-ua/package.json
@@ -0,0 +1,40 @@
+{
+  "name": "fittrack-ua",
+  "version": "0.0.0",
+  "scripts": {
+    "ng": "ng",
+    "start": "ng serve",
+    "build": "ng build",
+    "watch": "ng build --watch --configuration development",
+    "test": "ng test"
+  },
+  "private": true,
+  "dependencies": {
+    "@angular/animations": "^17.3.8",
+    "@angular/common": "^17.3.8",
+    "@angular/compiler": "^17.3.8",
+    "@angular/core": "^17.3.8",
+    "@angular/forms": "^17.3.8",
+    "@angular/platform-browser": "^17.3.8",
+    "@angular/platform-browser-dynamic": "^17.3.8",
+    "@angular/router": "^17.3.8",
+    "@angular/service-worker": "^17.3.8",
+    "rxjs": "~7.8.1",
+    "tslib": "^2.6.2",
+    "zone.js": "~0.14.5"
+  },
+  "devDependencies": {
+    "@angular-devkit/build-angular": "^17.3.8",
+    "@angular/cli": "^17.3.8",
+    "@angular/compiler-cli": "^17.3.8",
+    "@types/jasmine": "~5.1.0",
+    "jasmine-core": "~5.1.1",
+    "karma": "~6.4.3",
+    "karma-chrome-launcher": "~3.2.0",
+    "karma-coverage": "~2.2.0",
+    "karma-jasmine": "~5.1.0",
+    "karma-jasmine-html-reporter": "~2.1.0",
+    "typescript": "~5.2.2",
+    "ng-packagr": "^17.3.3"
+  }
+}
diff --git a/fittrack-ua/projects/cloud-connectors/karma.conf.js b/fittrack-ua/projects/cloud-connectors/karma.conf.js
new file mode 100644
index 0000000000000000000000000000000000000000..aafd0964dfafd65f1364d333cddecc3a29d5b945
--- /dev/null
+++ b/fittrack-ua/projects/cloud-connectors/karma.conf.js
@@ -0,0 +1,38 @@
+const { join } = require('path');
+const { constants } = require('karma');
+
+module.exports = function (config) {
+  config.set({
+    basePath: '',
+    frameworks: ['jasmine', '@angular-devkit/build-angular'],
+    plugins: [
+      require('karma-jasmine'),
+      require('karma-chrome-launcher'),
+      require('karma-jasmine-html-reporter'),
+      require('karma-coverage'),
+      require('@angular-devkit/build-angular/plugins/karma')
+    ],
+    client: {
+      jasmine: {
+        random: false
+      },
+      clearContext: false
+    },
+    coverageReporter: {
+      dir: join(__dirname, '../../coverage/cloud-connectors'),
+      subdir: '.',
+      reporters: [
+        { type: 'html' },
+        { type: 'text-summary' }
+      ]
+    },
+    reporters: ['progress', 'kjhtml'],
+    port: 9876,
+    colors: true,
+    logLevel: constants.LOG_INFO,
+    autoWatch: true,
+    browsers: ['ChromeHeadless'],
+    singleRun: false,
+    restartOnFileChange: true
+  });
+};
diff --git a/fittrack-ua/projects/cloud-connectors/ng-package.json b/fittrack-ua/projects/cloud-connectors/ng-package.json
new file mode 100644
index 0000000000000000000000000000000000000000..eaf1495de3cd5e8b554fda34c7f9437722b7cf7d
--- /dev/null
+++ b/fittrack-ua/projects/cloud-connectors/ng-package.json
@@ -0,0 +1,7 @@
+{
+  "$schema": "../../node_modules/ng-packagr/ng-package.schema.json",
+  "dest": "../../dist/cloud-connectors",
+  "lib": {
+    "entryFile": "src/index.ts"
+  }
+}
diff --git a/fittrack-ua/projects/cloud-connectors/package.json b/fittrack-ua/projects/cloud-connectors/package.json
new file mode 100644
index 0000000000000000000000000000000000000000..0be3d58aa98ae5203cd7520e8504dee9d035e9e3
--- /dev/null
+++ b/fittrack-ua/projects/cloud-connectors/package.json
@@ -0,0 +1,8 @@
+{
+  "name": "@fittrack/cloud-connectors",
+  "version": "0.0.1",
+  "peerDependencies": {
+    "@angular/common": "^17.0.0",
+    "@angular/core": "^17.0.0"
+  }
+}
diff --git a/fittrack-ua/projects/cloud-connectors/project.json b/fittrack-ua/projects/cloud-connectors/project.json
new file mode 100644
index 0000000000000000000000000000000000000000..8a75044d38777f97476148e49b10fe2190592030
--- /dev/null
+++ b/fittrack-ua/projects/cloud-connectors/project.json
@@ -0,0 +1,35 @@
+{
+  "$schema": "../../node_modules/@angular/cli/lib/config/project-schema.json",
+  "projectType": "library",
+  "root": "projects/cloud-connectors",
+  "sourceRoot": "projects/cloud-connectors/src",
+  "prefix": "fittrack",
+  "architect": {
+    "build": {
+      "builder": "@angular-devkit/build-angular:ng-packagr",
+      "options": {
+        "project": "projects/cloud-connectors/ng-package.json"
+      },
+      "configurations": {
+        "production": {
+          "tsConfig": "projects/cloud-connectors/tsconfig.lib.prod.json"
+        },
+        "development": {
+          "tsConfig": "projects/cloud-connectors/tsconfig.lib.json"
+        }
+      },
+      "defaultConfiguration": "production"
+    },
+    "test": {
+      "builder": "@angular-devkit/build-angular:karma",
+      "options": {
+        "tsConfig": "projects/cloud-connectors/tsconfig.spec.json",
+        "karmaConfig": "projects/cloud-connectors/karma.conf.js",
+        "polyfills": [
+          "zone.js",
+          "zone.js/testing"
+        ]
+      }
+    }
+  }
+}
diff --git a/fittrack-ua/projects/cloud-connectors/src/index.ts b/fittrack-ua/projects/cloud-connectors/src/index.ts
new file mode 100644
index 0000000000000000000000000000000000000000..71f747966db2b40193d99da9eeca10df46ca5198
--- /dev/null
+++ b/fittrack-ua/projects/cloud-connectors/src/index.ts
@@ -0,0 +1 @@
+export * from './lib/cloud-connectors.registry';
diff --git a/fittrack-ua/projects/cloud-connectors/src/lib/cloud-connectors.registry.spec.ts b/fittrack-ua/projects/cloud-connectors/src/lib/cloud-connectors.registry.spec.ts
new file mode 100644
index 0000000000000000000000000000000000000000..0d7ab63bde80f384cd19c8e0e2bfecd2d615f1f2
--- /dev/null
+++ b/fittrack-ua/projects/cloud-connectors/src/lib/cloud-connectors.registry.spec.ts
@@ -0,0 +1,40 @@
+import { CloudConnectorsRegistry } from './cloud-connectors.registry';
+
+describe('CloudConnectorsRegistry', () => {
+  let registry: CloudConnectorsRegistry;
+
+  beforeEach(() => {
+    registry = new CloudConnectorsRegistry();
+  });
+
+  it('should register and list connectors', () => {
+    const connector = {
+      id: 'mock',
+      displayName: 'Mock Connector',
+      connect: async () => true
+    };
+    registry.register(connector);
+    expect(registry.list()).toEqual([connector]);
+  });
+
+  it('should connect through registered connector', async () => {
+    let executed = false;
+    registry.register({
+      id: 'mock',
+      displayName: 'Mock Connector',
+      connect: async () => {
+        executed = true;
+        return true;
+      }
+    });
+
+    const result = await registry.connect('mock');
+    expect(result).toBeTrue();
+    expect(executed).toBeTrue();
+  });
+
+  it('should return false for missing connector', async () => {
+    const result = await registry.connect('missing');
+    expect(result).toBeFalse();
+  });
+});
diff --git a/fittrack-ua/projects/cloud-connectors/src/lib/cloud-connectors.registry.ts b/fittrack-ua/projects/cloud-connectors/src/lib/cloud-connectors.registry.ts
new file mode 100644
index 0000000000000000000000000000000000000000..9b71173381497bcd16ef640b09ea4d9e43ef2baf
--- /dev/null
+++ b/fittrack-ua/projects/cloud-connectors/src/lib/cloud-connectors.registry.ts
@@ -0,0 +1,33 @@
+import { Injectable } from '@angular/core';
+
+export interface CloudConnector<TConfig = Record<string, unknown>> {
+  readonly id: string;
+  readonly displayName: string;
+  connect(config: TConfig): Promise<boolean>;
+}
+
+@Injectable({ providedIn: 'root' })
+export class CloudConnectorsRegistry {
+  private readonly connectors = new Map<string, CloudConnector>();
+
+  register(connector: CloudConnector): void {
+    this.connectors.set(connector.id, connector);
+  }
+
+  unregister(id: string): void {
+    this.connectors.delete(id);
+  }
+
+  list(): CloudConnector[] {
+    return Array.from(this.connectors.values());
+  }
+
+  async connect(id: string, config: Record<string, unknown> = {}): Promise<boolean> {
+    const connector = this.connectors.get(id);
+    if (!connector) {
+      return false;
+    }
+
+    return connector.connect(config);
+  }
+}
diff --git a/fittrack-ua/projects/cloud-connectors/src/test.ts b/fittrack-ua/projects/cloud-connectors/src/test.ts
new file mode 100644
index 0000000000000000000000000000000000000000..6d433e5e39dc776fbd7c02375c28694f536166cd
--- /dev/null
+++ b/fittrack-ua/projects/cloud-connectors/src/test.ts
@@ -0,0 +1,5 @@
+import 'zone.js/testing';
+import { getTestBed } from '@angular/core/testing';
+import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
+
+getTestBed().initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
diff --git a/fittrack-ua/projects/cloud-connectors/tsconfig.lib.json b/fittrack-ua/projects/cloud-connectors/tsconfig.lib.json
new file mode 100644
index 0000000000000000000000000000000000000000..627c9a88b5d3c1831c46862290e26e1ed8a9ebfe
--- /dev/null
+++ b/fittrack-ua/projects/cloud-connectors/tsconfig.lib.json
@@ -0,0 +1,12 @@
+{
+  "extends": "../../tsconfig.base.json",
+  "compilerOptions": {
+    "outDir": "../../dist/out-tsc/cloud-connectors",
+    "declaration": true,
+    "declarationMap": true,
+    "inlineSources": true,
+    "types": []
+  },
+  "exclude": ["src/test.ts", "**/*.spec.ts"],
+  "include": ["src/**/*.ts"]
+}
diff --git a/fittrack-ua/projects/cloud-connectors/tsconfig.lib.prod.json b/fittrack-ua/projects/cloud-connectors/tsconfig.lib.prod.json
new file mode 100644
index 0000000000000000000000000000000000000000..46634e44fb153911226d1dd80ebbab8a1757a1be
--- /dev/null
+++ b/fittrack-ua/projects/cloud-connectors/tsconfig.lib.prod.json
@@ -0,0 +1,6 @@
+{
+  "extends": "./tsconfig.lib.json",
+  "compilerOptions": {
+    "declarationMap": false
+  }
+}
diff --git a/fittrack-ua/projects/cloud-connectors/tsconfig.spec.json b/fittrack-ua/projects/cloud-connectors/tsconfig.spec.json
new file mode 100644
index 0000000000000000000000000000000000000000..d395b084006edc0ecfcdc6d438c903361989297b
--- /dev/null
+++ b/fittrack-ua/projects/cloud-connectors/tsconfig.spec.json
@@ -0,0 +1,10 @@
+{
+  "extends": "../../tsconfig.base.json",
+  "compilerOptions": {
+    "outDir": "../../dist/out-tsc/cloud-connectors-spec",
+    "module": "commonjs",
+    "types": ["jasmine", "node"]
+  },
+  "files": ["src/test.ts"],
+  "include": ["src/**/*.spec.ts", "src/**/*.d.ts"]
+}
diff --git a/fittrack-ua/projects/crypto/karma.conf.js b/fittrack-ua/projects/crypto/karma.conf.js
new file mode 100644
index 0000000000000000000000000000000000000000..76c1e241a32a968c1113dce9f36b08c6d00b0712
--- /dev/null
+++ b/fittrack-ua/projects/crypto/karma.conf.js
@@ -0,0 +1,38 @@
+const { join } = require('path');
+const { constants } = require('karma');
+
+module.exports = function (config) {
+  config.set({
+    basePath: '',
+    frameworks: ['jasmine', '@angular-devkit/build-angular'],
+    plugins: [
+      require('karma-jasmine'),
+      require('karma-chrome-launcher'),
+      require('karma-jasmine-html-reporter'),
+      require('karma-coverage'),
+      require('@angular-devkit/build-angular/plugins/karma')
+    ],
+    client: {
+      jasmine: {
+        random: false
+      },
+      clearContext: false
+    },
+    coverageReporter: {
+      dir: join(__dirname, '../../coverage/crypto'),
+      subdir: '.',
+      reporters: [
+        { type: 'html' },
+        { type: 'text-summary' }
+      ]
+    },
+    reporters: ['progress', 'kjhtml'],
+    port: 9876,
+    colors: true,
+    logLevel: constants.LOG_INFO,
+    autoWatch: true,
+    browsers: ['ChromeHeadless'],
+    singleRun: false,
+    restartOnFileChange: true
+  });
+};
diff --git a/fittrack-ua/projects/crypto/ng-package.json b/fittrack-ua/projects/crypto/ng-package.json
new file mode 100644
index 0000000000000000000000000000000000000000..ffbafd360e249ac34dae4b15907985f6ebc977fd
--- /dev/null
+++ b/fittrack-ua/projects/crypto/ng-package.json
@@ -0,0 +1,7 @@
+{
+  "$schema": "../../node_modules/ng-packagr/ng-package.schema.json",
+  "dest": "../../dist/crypto",
+  "lib": {
+    "entryFile": "src/index.ts"
+  }
+}
diff --git a/fittrack-ua/projects/crypto/package.json b/fittrack-ua/projects/crypto/package.json
new file mode 100644
index 0000000000000000000000000000000000000000..115d519398b6e324043cabd4f98600f02c8e9dab
--- /dev/null
+++ b/fittrack-ua/projects/crypto/package.json
@@ -0,0 +1,8 @@
+{
+  "name": "@fittrack/crypto",
+  "version": "0.0.1",
+  "peerDependencies": {
+    "@angular/common": "^17.0.0",
+    "@angular/core": "^17.0.0"
+  }
+}
diff --git a/fittrack-ua/projects/crypto/project.json b/fittrack-ua/projects/crypto/project.json
new file mode 100644
index 0000000000000000000000000000000000000000..5076d1634d19de8110eeb24e99879deb8e77e033
--- /dev/null
+++ b/fittrack-ua/projects/crypto/project.json
@@ -0,0 +1,35 @@
+{
+  "$schema": "../../node_modules/@angular/cli/lib/config/project-schema.json",
+  "projectType": "library",
+  "root": "projects/crypto",
+  "sourceRoot": "projects/crypto/src",
+  "prefix": "fittrack",
+  "architect": {
+    "build": {
+      "builder": "@angular-devkit/build-angular:ng-packagr",
+      "options": {
+        "project": "projects/crypto/ng-package.json"
+      },
+      "configurations": {
+        "production": {
+          "tsConfig": "projects/crypto/tsconfig.lib.prod.json"
+        },
+        "development": {
+          "tsConfig": "projects/crypto/tsconfig.lib.json"
+        }
+      },
+      "defaultConfiguration": "production"
+    },
+    "test": {
+      "builder": "@angular-devkit/build-angular:karma",
+      "options": {
+        "tsConfig": "projects/crypto/tsconfig.spec.json",
+        "karmaConfig": "projects/crypto/karma.conf.js",
+        "polyfills": [
+          "zone.js",
+          "zone.js/testing"
+        ]
+      }
+    }
+  }
+}
diff --git a/fittrack-ua/projects/crypto/src/index.ts b/fittrack-ua/projects/crypto/src/index.ts
new file mode 100644
index 0000000000000000000000000000000000000000..31689fbc78d5ea558fbdac8fb36eb08fcd1828ea
--- /dev/null
+++ b/fittrack-ua/projects/crypto/src/index.ts
@@ -0,0 +1 @@
+export * from './lib/crypto-toolkit.service';
diff --git a/fittrack-ua/projects/crypto/src/lib/crypto-toolkit.service.spec.ts b/fittrack-ua/projects/crypto/src/lib/crypto-toolkit.service.spec.ts
new file mode 100644
index 0000000000000000000000000000000000000000..2a24e64294aee15116d273a0de78ea8f14823fc9
--- /dev/null
+++ b/fittrack-ua/projects/crypto/src/lib/crypto-toolkit.service.spec.ts
@@ -0,0 +1,20 @@
+import { CryptoToolkit } from './crypto-toolkit.service';
+
+describe('CryptoToolkit', () => {
+  let toolkit: CryptoToolkit;
+
+  beforeEach(() => {
+    toolkit = new CryptoToolkit();
+  });
+
+  it('should generate non-empty nonce with default size', () => {
+    const nonce = toolkit.generateNonce();
+    expect(nonce.length).toBe(32);
+  });
+
+  it('should produce deterministic digest for the same input', async () => {
+    const first = await toolkit.digest('fittrack');
+    const second = await toolkit.digest('fittrack');
+    expect(first).toEqual(second);
+  });
+});
diff --git a/fittrack-ua/projects/crypto/src/lib/crypto-toolkit.service.ts b/fittrack-ua/projects/crypto/src/lib/crypto-toolkit.service.ts
new file mode 100644
index 0000000000000000000000000000000000000000..c1c40f94c0bf730baeb86c09c0638beb0f965652
--- /dev/null
+++ b/fittrack-ua/projects/crypto/src/lib/crypto-toolkit.service.ts
@@ -0,0 +1,17 @@
+import { Injectable } from '@angular/core';
+
+@Injectable({ providedIn: 'root' })
+export class CryptoToolkit {
+  async digest(message: string, algorithm: AlgorithmIdentifier = 'SHA-256'): Promise<string> {
+    const encoder = new TextEncoder();
+    const buffer = await crypto.subtle.digest(algorithm, encoder.encode(message));
+    const bytes = Array.from(new Uint8Array(buffer));
+    return bytes.map((byte) => byte.toString(16).padStart(2, '0')).join('');
+  }
+
+  generateNonce(size = 16): string {
+    const array = new Uint8Array(size);
+    crypto.getRandomValues(array);
+    return Array.from(array, (byte) => byte.toString(16).padStart(2, '0')).join('');
+  }
+}
diff --git a/fittrack-ua/projects/crypto/src/test.ts b/fittrack-ua/projects/crypto/src/test.ts
new file mode 100644
index 0000000000000000000000000000000000000000..6d433e5e39dc776fbd7c02375c28694f536166cd
--- /dev/null
+++ b/fittrack-ua/projects/crypto/src/test.ts
@@ -0,0 +1,5 @@
+import 'zone.js/testing';
+import { getTestBed } from '@angular/core/testing';
+import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
+
+getTestBed().initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
diff --git a/fittrack-ua/projects/crypto/tsconfig.lib.json b/fittrack-ua/projects/crypto/tsconfig.lib.json
new file mode 100644
index 0000000000000000000000000000000000000000..2b90d4a4723a5f7a13551309adde72a71242dfa1
--- /dev/null
+++ b/fittrack-ua/projects/crypto/tsconfig.lib.json
@@ -0,0 +1,12 @@
+{
+  "extends": "../../tsconfig.base.json",
+  "compilerOptions": {
+    "outDir": "../../dist/out-tsc/crypto",
+    "declaration": true,
+    "declarationMap": true,
+    "inlineSources": true,
+    "types": []
+  },
+  "exclude": ["src/test.ts", "**/*.spec.ts"],
+  "include": ["src/**/*.ts"]
+}
diff --git a/fittrack-ua/projects/crypto/tsconfig.lib.prod.json b/fittrack-ua/projects/crypto/tsconfig.lib.prod.json
new file mode 100644
index 0000000000000000000000000000000000000000..46634e44fb153911226d1dd80ebbab8a1757a1be
--- /dev/null
+++ b/fittrack-ua/projects/crypto/tsconfig.lib.prod.json
@@ -0,0 +1,6 @@
+{
+  "extends": "./tsconfig.lib.json",
+  "compilerOptions": {
+    "declarationMap": false
+  }
+}
diff --git a/fittrack-ua/projects/crypto/tsconfig.spec.json b/fittrack-ua/projects/crypto/tsconfig.spec.json
new file mode 100644
index 0000000000000000000000000000000000000000..da5379bb9912b17aa0c3d86ad16b529762086a2b
--- /dev/null
+++ b/fittrack-ua/projects/crypto/tsconfig.spec.json
@@ -0,0 +1,10 @@
+{
+  "extends": "../../tsconfig.base.json",
+  "compilerOptions": {
+    "outDir": "../../dist/out-tsc/crypto-spec",
+    "module": "commonjs",
+    "types": ["jasmine", "node"]
+  },
+  "files": ["src/test.ts"],
+  "include": ["src/**/*.spec.ts", "src/**/*.d.ts"]
+}
diff --git a/fittrack-ua/projects/data-core/karma.conf.js b/fittrack-ua/projects/data-core/karma.conf.js
new file mode 100644
index 0000000000000000000000000000000000000000..536add1ba02967d1ff13a3076415bc49723c616d
--- /dev/null
+++ b/fittrack-ua/projects/data-core/karma.conf.js
@@ -0,0 +1,38 @@
+const { join } = require('path');
+const { constants } = require('karma');
+
+module.exports = function (config) {
+  config.set({
+    basePath: '',
+    frameworks: ['jasmine', '@angular-devkit/build-angular'],
+    plugins: [
+      require('karma-jasmine'),
+      require('karma-chrome-launcher'),
+      require('karma-jasmine-html-reporter'),
+      require('karma-coverage'),
+      require('@angular-devkit/build-angular/plugins/karma')
+    ],
+    client: {
+      jasmine: {
+        random: false
+      },
+      clearContext: false
+    },
+    coverageReporter: {
+      dir: join(__dirname, '../../coverage/data-core'),
+      subdir: '.',
+      reporters: [
+        { type: 'html' },
+        { type: 'text-summary' }
+      ]
+    },
+    reporters: ['progress', 'kjhtml'],
+    port: 9876,
+    colors: true,
+    logLevel: constants.LOG_INFO,
+    autoWatch: true,
+    browsers: ['ChromeHeadless'],
+    singleRun: false,
+    restartOnFileChange: true
+  });
+};
diff --git a/fittrack-ua/projects/data-core/ng-package.json b/fittrack-ua/projects/data-core/ng-package.json
new file mode 100644
index 0000000000000000000000000000000000000000..debce8cb8e7965e8044b121263b0776b6bcd89e5
--- /dev/null
+++ b/fittrack-ua/projects/data-core/ng-package.json
@@ -0,0 +1,7 @@
+{
+  "$schema": "../../node_modules/ng-packagr/ng-package.schema.json",
+  "dest": "../../dist/data-core",
+  "lib": {
+    "entryFile": "src/index.ts"
+  }
+}
diff --git a/fittrack-ua/projects/data-core/package.json b/fittrack-ua/projects/data-core/package.json
new file mode 100644
index 0000000000000000000000000000000000000000..1b134d83b44020a5263de86cbecd60e3760b5e32
--- /dev/null
+++ b/fittrack-ua/projects/data-core/package.json
@@ -0,0 +1,8 @@
+{
+  "name": "@fittrack/data-core",
+  "version": "0.0.1",
+  "peerDependencies": {
+    "@angular/common": "^17.0.0",
+    "@angular/core": "^17.0.0"
+  }
+}
diff --git a/fittrack-ua/projects/data-core/project.json b/fittrack-ua/projects/data-core/project.json
new file mode 100644
index 0000000000000000000000000000000000000000..fb05835ca1b78ac25d07f68534108783c0a28517
--- /dev/null
+++ b/fittrack-ua/projects/data-core/project.json
@@ -0,0 +1,35 @@
+{
+  "$schema": "../../node_modules/@angular/cli/lib/config/project-schema.json",
+  "projectType": "library",
+  "root": "projects/data-core",
+  "sourceRoot": "projects/data-core/src",
+  "prefix": "fittrack",
+  "architect": {
+    "build": {
+      "builder": "@angular-devkit/build-angular:ng-packagr",
+      "options": {
+        "project": "projects/data-core/ng-package.json"
+      },
+      "configurations": {
+        "production": {
+          "tsConfig": "projects/data-core/tsconfig.lib.prod.json"
+        },
+        "development": {
+          "tsConfig": "projects/data-core/tsconfig.lib.json"
+        }
+      },
+      "defaultConfiguration": "production"
+    },
+    "test": {
+      "builder": "@angular-devkit/build-angular:karma",
+      "options": {
+        "tsConfig": "projects/data-core/tsconfig.spec.json",
+        "karmaConfig": "projects/data-core/karma.conf.js",
+        "polyfills": [
+          "zone.js",
+          "zone.js/testing"
+        ]
+      }
+    }
+  }
+}
diff --git a/fittrack-ua/projects/data-core/src/index.ts b/fittrack-ua/projects/data-core/src/index.ts
new file mode 100644
index 0000000000000000000000000000000000000000..c27aa18d336ddf68f041ac658d0850e7958ea7dd
--- /dev/null
+++ b/fittrack-ua/projects/data-core/src/index.ts
@@ -0,0 +1 @@
+export * from './lib/data-core.service';
diff --git a/fittrack-ua/projects/data-core/src/lib/data-core.service.spec.ts b/fittrack-ua/projects/data-core/src/lib/data-core.service.spec.ts
new file mode 100644
index 0000000000000000000000000000000000000000..f3a0e6d4d38445bfb02eb202268965a006d5a71b
--- /dev/null
+++ b/fittrack-ua/projects/data-core/src/lib/data-core.service.spec.ts
@@ -0,0 +1,30 @@
+import { DataCoreService } from './data-core.service';
+
+describe('DataCoreService', () => {
+  let service: DataCoreService;
+
+  beforeEach(() => {
+    service = new DataCoreService();
+  });
+
+  it('should upsert and read data immutably', () => {
+    const input = { session: 1 };
+    service.upsert('entry', input);
+    const result = service.read('entry');
+
+    expect(result).toEqual({ session: 1 });
+    expect(result).not.toBe(input);
+  });
+
+  it('should clear values selectively', () => {
+    service.upsert('a', 1);
+    service.upsert('b', 2);
+    service.clear('a');
+
+    expect(service.has('a')).toBeFalse();
+    expect(service.has('b')).toBeTrue();
+
+    service.clear();
+    expect(service.has('b')).toBeFalse();
+  });
+});
diff --git a/fittrack-ua/projects/data-core/src/lib/data-core.service.ts b/fittrack-ua/projects/data-core/src/lib/data-core.service.ts
new file mode 100644
index 0000000000000000000000000000000000000000..27a0b37dfd42bd8e43703fd5988642d0b19c2d68
--- /dev/null
+++ b/fittrack-ua/projects/data-core/src/lib/data-core.service.ts
@@ -0,0 +1,27 @@
+import { Injectable } from '@angular/core';
+
+@Injectable({ providedIn: 'root' })
+export class DataCoreService {
+  private readonly storage = new Map<string, unknown>();
+
+  upsert<T>(key: string, payload: T): void {
+    this.storage.set(key, structuredClone(payload));
+  }
+
+  read<T>(key: string): T | undefined {
+    return structuredClone(this.storage.get(key) as T | undefined);
+  }
+
+  has(key: string): boolean {
+    return this.storage.has(key);
+  }
+
+  clear(key?: string): void {
+    if (key) {
+      this.storage.delete(key);
+      return;
+    }
+
+    this.storage.clear();
+  }
+}
diff --git a/fittrack-ua/projects/data-core/src/test.ts b/fittrack-ua/projects/data-core/src/test.ts
new file mode 100644
index 0000000000000000000000000000000000000000..6d433e5e39dc776fbd7c02375c28694f536166cd
--- /dev/null
+++ b/fittrack-ua/projects/data-core/src/test.ts
@@ -0,0 +1,5 @@
+import 'zone.js/testing';
+import { getTestBed } from '@angular/core/testing';
+import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
+
+getTestBed().initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
diff --git a/fittrack-ua/projects/data-core/tsconfig.lib.json b/fittrack-ua/projects/data-core/tsconfig.lib.json
new file mode 100644
index 0000000000000000000000000000000000000000..ab71ffe7e6d4324ad76dc46c9c2782bc9f658d89
--- /dev/null
+++ b/fittrack-ua/projects/data-core/tsconfig.lib.json
@@ -0,0 +1,12 @@
+{
+  "extends": "../../tsconfig.base.json",
+  "compilerOptions": {
+    "outDir": "../../dist/out-tsc/data-core",
+    "declaration": true,
+    "declarationMap": true,
+    "inlineSources": true,
+    "types": []
+  },
+  "exclude": ["src/test.ts", "**/*.spec.ts"],
+  "include": ["src/**/*.ts"]
+}
diff --git a/fittrack-ua/projects/data-core/tsconfig.lib.prod.json b/fittrack-ua/projects/data-core/tsconfig.lib.prod.json
new file mode 100644
index 0000000000000000000000000000000000000000..46634e44fb153911226d1dd80ebbab8a1757a1be
--- /dev/null
+++ b/fittrack-ua/projects/data-core/tsconfig.lib.prod.json
@@ -0,0 +1,6 @@
+{
+  "extends": "./tsconfig.lib.json",
+  "compilerOptions": {
+    "declarationMap": false
+  }
+}
diff --git a/fittrack-ua/projects/data-core/tsconfig.spec.json b/fittrack-ua/projects/data-core/tsconfig.spec.json
new file mode 100644
index 0000000000000000000000000000000000000000..39b3042bc9faa28e746125a9187c00d8041f41f9
--- /dev/null
+++ b/fittrack-ua/projects/data-core/tsconfig.spec.json
@@ -0,0 +1,10 @@
+{
+  "extends": "../../tsconfig.base.json",
+  "compilerOptions": {
+    "outDir": "../../dist/out-tsc/data-core-spec",
+    "module": "commonjs",
+    "types": ["jasmine", "node"]
+  },
+  "files": ["src/test.ts"],
+  "include": ["src/**/*.spec.ts", "src/**/*.d.ts"]
+}
diff --git a/fittrack-ua/projects/pwa/karma.conf.js b/fittrack-ua/projects/pwa/karma.conf.js
new file mode 100644
index 0000000000000000000000000000000000000000..eac187ce6f1b91393c233df5bdab92c9a5fb3df6
--- /dev/null
+++ b/fittrack-ua/projects/pwa/karma.conf.js
@@ -0,0 +1,38 @@
+const { join } = require('path');
+const { constants } = require('karma');
+
+module.exports = function (config) {
+  config.set({
+    basePath: '',
+    frameworks: ['jasmine', '@angular-devkit/build-angular'],
+    plugins: [
+      require('karma-jasmine'),
+      require('karma-chrome-launcher'),
+      require('karma-jasmine-html-reporter'),
+      require('karma-coverage'),
+      require('@angular-devkit/build-angular/plugins/karma')
+    ],
+    client: {
+      jasmine: {
+        random: false
+      },
+      clearContext: false
+    },
+    coverageReporter: {
+      dir: join(__dirname, '../../coverage/pwa'),
+      subdir: '.',
+      reporters: [
+        { type: 'html' },
+        { type: 'text-summary' }
+      ]
+    },
+    reporters: ['progress', 'kjhtml'],
+    port: 9876,
+    colors: true,
+    logLevel: constants.LOG_INFO,
+    autoWatch: true,
+    browsers: ['ChromeHeadless'],
+    singleRun: false,
+    restartOnFileChange: true
+  });
+};
diff --git a/fittrack-ua/projects/pwa/ngsw-config.json b/fittrack-ua/projects/pwa/ngsw-config.json
new file mode 100644
index 0000000000000000000000000000000000000000..25b6a8e9835148009ebe9ea52b14626f3954836f
--- /dev/null
+++ b/fittrack-ua/projects/pwa/ngsw-config.json
@@ -0,0 +1,29 @@
+{
+  "$schema": "../../node_modules/@angular/service-worker/config/schema.json",
+  "index": "/index.html",
+  "assetGroups": [
+    {
+      "name": "app",
+      "installMode": "prefetch",
+      "resources": {
+        "files": [
+          "/favicon.png",
+          "/index.html",
+          "/*.css",
+          "/*.js"
+        ]
+      }
+    },
+    {
+      "name": "assets",
+      "installMode": "lazy",
+      "updateMode": "prefetch",
+      "resources": {
+        "files": [
+          "/assets/**",
+          "/manifest.webmanifest"
+        ]
+      }
+    }
+  ]
+}
diff --git a/fittrack-ua/projects/pwa/project.json b/fittrack-ua/projects/pwa/project.json
new file mode 100644
index 0000000000000000000000000000000000000000..e6cdbf81b1c716b632a2a59a9e388d0d1ba747a0
--- /dev/null
+++ b/fittrack-ua/projects/pwa/project.json
@@ -0,0 +1,95 @@
+{
+  "$schema": "../../node_modules/@angular/cli/lib/config/project-schema.json",
+  "projectType": "application",
+  "root": "projects/pwa",
+  "sourceRoot": "projects/pwa/src",
+  "prefix": "app",
+  "architect": {
+    "build": {
+      "builder": "@angular-devkit/build-angular:browser",
+      "options": {
+        "outputPath": "dist/pwa",
+        "index": "projects/pwa/src/index.html",
+        "main": "projects/pwa/src/main.ts",
+        "polyfills": [
+          "zone.js"
+        ],
+        "tsConfig": "projects/pwa/tsconfig.app.json",
+        "assets": [
+          "projects/pwa/src/favicon.png",
+          "projects/pwa/src/assets",
+          "projects/pwa/src/manifest.webmanifest"
+        ],
+        "styles": [
+          "projects/pwa/src/styles.scss"
+        ],
+        "scripts": [],
+        "serviceWorker": true,
+        "ngswConfigPath": "projects/pwa/ngsw-config.json"
+      },
+      "configurations": {
+        "production": {
+          "budgets": [
+            {
+              "type": "initial",
+              "maximumWarning": "500kb",
+              "maximumError": "1mb"
+            },
+            {
+              "type": "anyComponentStyle",
+              "maximumWarning": "2kb",
+              "maximumError": "4kb"
+            }
+          ],
+          "fileReplacements": [
+            {
+              "replace": "projects/pwa/src/environments/environment.ts",
+              "with": "projects/pwa/src/environments/environment.prod.ts"
+            }
+          ],
+          "serviceWorker": true,
+          "outputHashing": "all"
+        },
+        "development": {
+          "buildOptimizer": false,
+          "optimization": false,
+          "vendorChunk": true,
+          "extractLicenses": false,
+          "sourceMap": true,
+          "namedChunks": true,
+          "serviceWorker": false
+        }
+      },
+      "defaultConfiguration": "production"
+    },
+    "serve": {
+      "builder": "@angular-devkit/build-angular:dev-server",
+      "configurations": {
+        "production": {
+          "buildTarget": "pwa:build:production"
+        },
+        "development": {
+          "buildTarget": "pwa:build:development"
+        }
+      },
+      "defaultConfiguration": "development"
+    },
+    "extract-i18n": {
+      "builder": "@angular-devkit/build-angular:extract-i18n",
+      "options": {
+        "buildTarget": "pwa:build"
+      }
+    },
+    "test": {
+      "builder": "@angular-devkit/build-angular:karma",
+      "options": {
+        "polyfills": [
+          "zone.js",
+          "zone.js/testing"
+        ],
+        "tsConfig": "projects/pwa/tsconfig.spec.json",
+        "karmaConfig": "projects/pwa/karma.conf.js"
+      }
+    }
+  }
+}
diff --git a/fittrack-ua/projects/pwa/src/app/app.component.html b/fittrack-ua/projects/pwa/src/app/app.component.html
new file mode 100644
index 0000000000000000000000000000000000000000..bc26a6e3d1c910a4f564dddcfe3386626aee044e
--- /dev/null
+++ b/fittrack-ua/projects/pwa/src/app/app.component.html
@@ -0,0 +1,20 @@
+<header class="app-header">
+  <h1>{{ title }}</h1>
+  <p>{{ description }}</p>
+  <nav>
+    <a
+      routerLink="/"
+      routerLinkActive="active"
+      #homeActive="routerLinkActive"
+      [routerLinkActiveOptions]="{ exact: true }"
+      [attr.aria-current]="homeActive.isActive ? 'page' : null"
+      >Головна</a
+    >
+  </nav>
+</header>
+<main class="app-content">
+  <router-outlet></router-outlet>
+</main>
+<footer class="app-footer">
+  <p>&copy; {{ title }} {{ (new Date()).getFullYear() }}</p>
+</footer>
diff --git a/fittrack-ua/projects/pwa/src/app/app.component.scss b/fittrack-ua/projects/pwa/src/app/app.component.scss
new file mode 100644
index 0000000000000000000000000000000000000000..313090c37dbe78493e02e4eccfca99c943095cf9
--- /dev/null
+++ b/fittrack-ua/projects/pwa/src/app/app.component.scss
@@ -0,0 +1,56 @@
+:host {
+  display: grid;
+  min-height: 100vh;
+  grid-template-rows: auto 1fr auto;
+  background: linear-gradient(180deg, #ffffff 0%, #f0f4ff 100%);
+}
+
+.app-header {
+  padding: 2rem 1.5rem 1rem;
+  text-align: center;
+  background-color: rgba(25, 118, 210, 0.08);
+  backdrop-filter: blur(8px);
+
+  h1 {
+    margin: 0;
+    font-size: clamp(1.75rem, 3vw, 2.5rem);
+    color: #0d47a1;
+  }
+
+  p {
+    margin: 0.5rem auto 1.5rem;
+    max-width: 36rem;
+    color: #334155;
+  }
+
+  nav {
+    display: flex;
+    justify-content: center;
+    gap: 1rem;
+
+    a {
+      padding: 0.5rem 1rem;
+      border-radius: 999px;
+      color: #0d47a1;
+      text-decoration: none;
+      transition: background-color 150ms ease-in-out;
+
+      &.active,
+      &:hover {
+        background-color: rgba(13, 71, 161, 0.12);
+      }
+    }
+  }
+}
+
+.app-content {
+  padding: 2rem 1.5rem 3rem;
+}
+
+.app-footer {
+  padding: 1rem;
+  text-align: center;
+  font-size: 0.875rem;
+  color: #475569;
+  background-color: rgba(15, 23, 42, 0.04);
+}
diff --git a/fittrack-ua/projects/pwa/src/app/app.component.spec.ts b/fittrack-ua/projects/pwa/src/app/app.component.spec.ts
new file mode 100644
index 0000000000000000000000000000000000000000..0d186dd9b4c7c3f71b2047c084017d5a54a1b308
--- /dev/null
+++ b/fittrack-ua/projects/pwa/src/app/app.component.spec.ts
@@ -0,0 +1,29 @@
+import { TestBed } from '@angular/core/testing';
+import { AppComponent } from './app.component';
+
+describe('AppComponent', () => {
+  beforeEach(async () => {
+    await TestBed.configureTestingModule({
+      imports: [AppComponent]
+    }).compileComponents();
+  });
+
+  it('should create the app', () => {
+    const fixture = TestBed.createComponent(AppComponent);
+    const app = fixture.componentInstance;
+    expect(app).toBeTruthy();
+  });
+
+  it(`should have a title`, () => {
+    const fixture = TestBed.createComponent(AppComponent);
+    const app = fixture.componentInstance;
+    expect(app.title).toEqual('FitTrack UA');
+  });
+
+  it('should render title', () => {
+    const fixture = TestBed.createComponent(AppComponent);
+    fixture.detectChanges();
+    const compiled = fixture.nativeElement as HTMLElement;
+    expect(compiled.querySelector('h1')?.textContent).toContain('FitTrack UA');
+  });
+});
diff --git a/fittrack-ua/projects/pwa/src/app/app.component.ts b/fittrack-ua/projects/pwa/src/app/app.component.ts
new file mode 100644
index 0000000000000000000000000000000000000000..caca68b14b04eb16bc4595709eb9dff5649eca13
--- /dev/null
+++ b/fittrack-ua/projects/pwa/src/app/app.component.ts
@@ -0,0 +1,15 @@
+import { ChangeDetectionStrategy, Component } from '@angular/core';
+import { RouterLink, RouterLinkActive, RouterOutlet } from '@angular/router';
+
+@Component({
+  selector: 'app-root',
+  standalone: true,
+  imports: [RouterOutlet, RouterLink, RouterLinkActive],
+  templateUrl: './app.component.html',
+  styleUrls: ['./app.component.scss'],
+  changeDetection: ChangeDetectionStrategy.OnPush
+})
+export class AppComponent {
+  readonly title = 'FitTrack UA';
+  readonly description = 'Персональний прогрес-фітнес трекер з підтримкою офлайн синхронізації.';
+}
diff --git a/fittrack-ua/projects/pwa/src/app/app.config.ts b/fittrack-ua/projects/pwa/src/app/app.config.ts
new file mode 100644
index 0000000000000000000000000000000000000000..70a69e1c1ceb415292898f0807795dd516c0544f
--- /dev/null
+++ b/fittrack-ua/projects/pwa/src/app/app.config.ts
@@ -0,0 +1,18 @@
+import { ApplicationConfig, isDevMode } from '@angular/core';
+import { provideRouter, withInMemoryScrolling } from '@angular/router';
+import { provideHttpClient, withFetch } from '@angular/common/http';
+import { provideServiceWorker } from '@angular/service-worker';
+import { provideAnimations } from '@angular/platform-browser/animations';
+import { appRoutes } from './app.routes';
+
+export const appConfig: ApplicationConfig = {
+  providers: [
+    provideRouter(appRoutes, withInMemoryScrolling({ scrollPositionRestoration: 'enabled' })),
+    provideHttpClient(withFetch()),
+    provideAnimations(),
+    provideServiceWorker('ngsw-worker.js', {
+      enabled: !isDevMode(),
+      registrationStrategy: 'registerWhenStable:30000'
+    })
+  ]
+};
diff --git a/fittrack-ua/projects/pwa/src/app/app.routes.ts b/fittrack-ua/projects/pwa/src/app/app.routes.ts
new file mode 100644
index 0000000000000000000000000000000000000000..d766732ae2d7e1e2fec365fb596e96ab4722f6c6
--- /dev/null
+++ b/fittrack-ua/projects/pwa/src/app/app.routes.ts
@@ -0,0 +1,13 @@
+import { Routes } from '@angular/router';
+
+export const appRoutes: Routes = [
+  {
+    path: '',
+    loadComponent: () => import('./home/home.component').then((m) => m.HomeComponent)
+  },
+  {
+    path: '**',
+    redirectTo: '',
+    pathMatch: 'full'
+  }
+];
diff --git a/fittrack-ua/projects/pwa/src/app/core/services/push-notification.service.spec.ts b/fittrack-ua/projects/pwa/src/app/core/services/push-notification.service.spec.ts
new file mode 100644
index 0000000000000000000000000000000000000000..d019e9ffd1294600d9cc4805c484439c5d1cb3fd
--- /dev/null
+++ b/fittrack-ua/projects/pwa/src/app/core/services/push-notification.service.spec.ts
@@ -0,0 +1,100 @@
+import { TestBed } from '@angular/core/testing';
+import { SwPush } from '@angular/service-worker';
+import { ReplaySubject } from 'rxjs';
+import { environment } from '../../../environments/environment';
+import { PushNotificationError, PushNotificationService } from './push-notification.service';
+
+describe('PushNotificationService', () => {
+  let service: PushNotificationService;
+  let swPushSpy: jasmine.SpyObj<SwPush>;
+  let requestPermissionSpy: jasmine.Spy;
+  let subscription$: ReplaySubject<PushSubscription | null>;
+
+  beforeEach(() => {
+    (globalThis as unknown as { PushManager?: object }).PushManager = function PushManager() {} as unknown as PushManager;
+    requestPermissionSpy = jasmine
+      .createSpy('requestPermission')
+      .and.callFake(async () => {
+        (globalThis as { Notification: Notification }).Notification.permission = 'granted';
+        return 'granted';
+      });
+    subscription$ = new ReplaySubject<PushSubscription | null>(1);
+    subscription$.next(null);
+    (globalThis as { Notification: Notification }).Notification = {
+      permission: 'default',
+      requestPermission: requestPermissionSpy
+    } as unknown as Notification;
+
+    swPushSpy = jasmine.createSpyObj<SwPush>('SwPush', ['requestSubscription'], {
+      isEnabled: true,
+      subscription: subscription$.asObservable()
+    });
+
+    TestBed.configureTestingModule({
+      providers: [
+        PushNotificationService,
+        { provide: SwPush, useValue: swPushSpy }
+      ]
+    });
+
+    service = TestBed.inject(PushNotificationService);
+  });
+
+  it('should report support when service worker push is enabled', () => {
+    expect(service.isSupported()).toBeTrue();
+  });
+
+  it('should throw configuration error when VAPID key is missing', async () => {
+    const originalVapidKey = environment.vapidPublicKey;
+    (environment as { vapidPublicKey?: string }).vapidPublicKey = '';
+
+    await expectAsync(service.subscribe()).toBeRejectedWithError(
+      PushNotificationError,
+      /VAPID/
+    );
+
+    (environment as { vapidPublicKey?: string }).vapidPublicKey = originalVapidKey;
+  });
+
+  it('should throw when push is not supported', async () => {
+    swPushSpy.isEnabled = false;
+
+    await expectAsync(service.subscribe()).toBeRejectedWithError(
+      PushNotificationError,
+      /не підтримуються/
+    );
+  });
+
+  it('should request permission when needed', async () => {
+    swPushSpy.requestSubscription.and.resolveTo({} as PushSubscription);
+
+    await service.subscribe();
+
+    expect(requestPermissionSpy).toHaveBeenCalled();
+  });
+
+  it('should resolve with subscription when successful', async () => {
+    const subscription = {} as PushSubscription;
+    swPushSpy.requestSubscription.and.resolveTo(subscription);
+
+    await expectAsync(service.subscribe()).toBeResolvedTo(subscription);
+  });
+
+  it('should reuse existing subscription', async () => {
+    const subscription = {} as PushSubscription;
+    subscription$.next(subscription);
+
+    await expectAsync(service.subscribe()).toBeResolvedTo(subscription);
+    expect(swPushSpy.requestSubscription).not.toHaveBeenCalled();
+  });
+
+  it('should wrap subscription errors', async () => {
+    const failure = new Error('boom');
+    swPushSpy.requestSubscription.and.rejectWith(failure);
+
+    await expectAsync(service.subscribe()).toBeRejectedWithError(
+      PushNotificationError,
+      /Не вдалося/
+    );
+  });
+});
diff --git a/fittrack-ua/projects/pwa/src/app/core/services/push-notification.service.ts b/fittrack-ua/projects/pwa/src/app/core/services/push-notification.service.ts
new file mode 100644
index 0000000000000000000000000000000000000000..cd34f983d58d9d60e7ff8a2ed01d8d6d9aa8a314
--- /dev/null
+++ b/fittrack-ua/projects/pwa/src/app/core/services/push-notification.service.ts
@@ -0,0 +1,108 @@
+import { Injectable } from '@angular/core';
+import { SwPush } from '@angular/service-worker';
+import { firstValueFrom } from 'rxjs';
+import { environment } from '../../../environments/environment';
+
+type PushErrorCode =
+  | 'unsupported'
+  | 'permission-blocked'
+  | 'configuration'
+  | 'subscription-failed';
+
+export class PushNotificationError extends Error {
+  override readonly name = 'PushNotificationError';
+
+  constructor(
+    readonly code: PushErrorCode,
+    message: string,
+    options?: { cause?: unknown }
+  ) {
+    super(message, options);
+  }
+}
+
+@Injectable({ providedIn: 'root' })
+export class PushNotificationService {
+  constructor(private readonly swPush: SwPush) {}
+
+  private get vapidKey(): string | undefined {
+    return environment.vapidPublicKey?.trim();
+  }
+
+  /**
+   * Checks whether the current runtime can register push notifications.
+   */
+  isSupported(): boolean {
+    return (
+      this.swPush.isEnabled &&
+      typeof Notification !== 'undefined' &&
+      typeof PushManager !== 'undefined'
+    );
+  }
+
+  /**
+   * Attempts to subscribe the current client to push notifications.
+   * Throws a {@link PushNotificationError} when the subscription cannot be created.
+   */
+  async subscribe(): Promise<PushSubscription> {
+    if (!this.isSupported()) {
+      throw new PushNotificationError(
+        'unsupported',
+        'Push повідомлення не підтримуються у цьому середовищі.'
+      );
+    }
+
+    const vapidKey = this.vapidKey;
+
+    if (!vapidKey) {
+      throw new PushNotificationError(
+        'configuration',
+        'Публічний VAPID-ключ не налаштовано. Зверніться до адміністратора.'
+      );
+    }
+
+    if (Notification.permission === 'denied') {
+      throw new PushNotificationError(
+        'permission-blocked',
+        'Доступ до push повідомлень заборонено у налаштуваннях браузера.'
+      );
+    }
+
+    if (Notification.permission !== 'granted') {
+      const permission = await Notification.requestPermission();
+
+      if (permission !== 'granted') {
+        throw new PushNotificationError(
+          'permission-blocked',
+          'Для активації push повідомлень надайте відповідний дозвіл у браузері.'
+        );
+      }
+    }
+
+    const existing = await firstValueFrom(this.swPush.subscription);
+
+    if (existing) {
+      return existing;
+    }
+
+    try {
+      return await this.swPush.requestSubscription({
+        serverPublicKey: vapidKey
+      });
+    } catch (error) {
+      throw new PushNotificationError(
+        'subscription-failed',
+        'Не вдалося оформити підписку на push повідомлення. Повторіть спробу пізніше.',
+        { cause: error }
+      );
+    }
+  }
+
+  describeError(error: unknown): string {
+    if (error instanceof PushNotificationError) {
+      return error.message;
+    }
+
+    return 'Сталася невідома помилка під час активації push повідомлень.';
+  }
+}
diff --git a/fittrack-ua/projects/pwa/src/app/home/home.component.html b/fittrack-ua/projects/pwa/src/app/home/home.component.html
new file mode 100644
index 0000000000000000000000000000000000000000..3ff02bbf95558edaac6ddaba97972b40569a3d24
--- /dev/null
+++ b/fittrack-ua/projects/pwa/src/app/home/home.component.html
@@ -0,0 +1,43 @@
+<section class="hero">
+  <h2>Ласкаво просимо до FitTrack UA</h2>
+  <p>
+    Відстежуйте свої тренування, харчування та відновлення у сучасному прогресивному веб-застосунку,
+    що працює навіть без інтернету.
+  </p>
+</section>
+<section class="highlights">
+  <h3>Можливості</h3>
+  <ul>
+    <li *ngFor="let item of highlights">{{ item }}</li>
+  </ul>
+</section>
+<section class="cta">
+  <button type="button">Розпочати</button>
+</section>
+<section class="notifications" *ngIf="isPushSupported; else pushUnavailable">
+  <h3>Push сповіщення</h3>
+  <p>
+    Отримуйте нагадування про тренування та оновлення прогресу навіть тоді, коли застосунок не відкритий.
+  </p>
+  <button type="button" (click)="enableNotifications()" [disabled]="isProcessing()">
+    {{ isProcessing() ? 'Активація…' : 'Увімкнути сповіщення' }}
+  </button>
+  <div
+    class="status-banner"
+    *ngIf="bannerMessage() as message"
+    [class.status-banner--success]="bannerType() === 'success'"
+    [class.status-banner--error]="bannerType() === 'error'"
+    role="status"
+    aria-live="polite"
+  >
+    {{ message }}
+  </div>
+</section>
+<ng-template #pushUnavailable>
+  <section class="notifications notifications--disabled">
+    <h3>Push сповіщення</h3>
+    <p>
+      Push сповіщення недоступні у режимі розробки або у цьому браузері. Опублікуйте застосунок, щоб активувати функцію.
+    </p>
+  </section>
+</ng-template>
diff --git a/fittrack-ua/projects/pwa/src/app/home/home.component.scss b/fittrack-ua/projects/pwa/src/app/home/home.component.scss
new file mode 100644
index 0000000000000000000000000000000000000000..08a7110f80722638dc183090a67a1d34d78e1002
--- /dev/null
+++ b/fittrack-ua/projects/pwa/src/app/home/home.component.scss
@@ -0,0 +1,138 @@
+:host {
+  display: block;
+  max-width: 960px;
+  margin: 0 auto;
+  padding: 2rem 1.5rem 4rem;
+}
+
+.hero {
+  text-align: center;
+
+  h2 {
+    margin-bottom: 1rem;
+    font-size: clamp(2rem, 4vw, 2.75rem);
+    color: #0d47a1;
+  }
+
+  p {
+    margin: 0 auto;
+    max-width: 44rem;
+    color: #334155;
+  }
+}
+
+.highlights {
+  margin-top: 2.5rem;
+
+  h3 {
+    margin-bottom: 1rem;
+    color: #1e3a8a;
+  }
+
+  ul {
+    margin: 0;
+    padding: 0;
+    list-style: none;
+    display: grid;
+    gap: 0.75rem;
+  }
+
+  li {
+    padding: 1rem 1.25rem;
+    border-radius: 1rem;
+    background: rgba(25, 118, 210, 0.08);
+    color: #1f2937;
+    box-shadow: 0 10px 25px -18px rgba(15, 23, 42, 0.65);
+  }
+}
+
+.cta {
+  margin-top: 2.5rem;
+  text-align: center;
+
+  button {
+    padding: 0.75rem 2.5rem;
+    border: none;
+    border-radius: 999px;
+    background: linear-gradient(135deg, #0d47a1, #42a5f5);
+    color: #fff;
+    font-size: 1rem;
+    cursor: pointer;
+    transition: filter 150ms ease-in-out;
+
+    &:hover {
+      filter: brightness(1.05);
+    }
+  }
+}
+
+.notifications {
+  margin-top: 3rem;
+  padding: 2rem;
+  border: 1px solid rgba(13, 71, 161, 0.15);
+  border-radius: 1.5rem;
+  background: rgba(13, 71, 161, 0.05);
+  max-width: 40rem;
+  margin-inline: auto;
+  text-align: center;
+
+  h3 {
+    margin-top: 0;
+    margin-bottom: 0.75rem;
+  }
+
+  p {
+    margin-bottom: 1.5rem;
+    color: #1f2937;
+  }
+
+  button {
+    padding: 0.75rem 1.75rem;
+    border-radius: 999px;
+    border: none;
+    background-color: #0d47a1;
+    color: #fff;
+    font-weight: 600;
+    cursor: pointer;
+    transition: background-color 0.2s ease, transform 0.2s ease;
+
+    &:disabled {
+      opacity: 0.6;
+      cursor: progress;
+    }
+
+    &:not(:disabled):hover {
+      background-color: #1565c0;
+      transform: translateY(-1px);
+    }
+  }
+
+  .status-banner {
+    margin-top: 1.5rem;
+    padding: 1rem;
+    border-radius: 0.75rem;
+    font-weight: 600;
+    background: rgba(25, 118, 210, 0.12);
+    color: #0d47a1;
+
+    &--success {
+      background: rgba(56, 142, 60, 0.12);
+      color: #2e7d32;
+    }
+
+    &--error {
+      background: rgba(229, 57, 53, 0.14);
+      color: #c62828;
+    }
+  }
+
+  &--disabled {
+    background: rgba(148, 163, 184, 0.12);
+    border-color: rgba(100, 116, 139, 0.2);
+
+    p {
+      margin-bottom: 0;
+      color: #475569;
+    }
+  }
+}
diff --git a/fittrack-ua/projects/pwa/src/app/home/home.component.ts b/fittrack-ua/projects/pwa/src/app/home/home.component.ts
new file mode 100644
index 0000000000000000000000000000000000000000..acaffcdd37aa3a66dd73bd8890129533d4a1d850
--- /dev/null
+++ b/fittrack-ua/projects/pwa/src/app/home/home.component.ts
@@ -0,0 +1,48 @@
+import { ChangeDetectionStrategy, Component, computed, signal } from '@angular/core';
+import { CommonModule } from '@angular/common';
+import { PushNotificationService } from '../core/services/push-notification.service';
+
+@Component({
+  selector: 'app-home',
+  standalone: true,
+  imports: [CommonModule],
+  templateUrl: './home.component.html',
+  styleUrls: ['./home.component.scss'],
+  changeDetection: ChangeDetectionStrategy.OnPush
+})
+export class HomeComponent {
+  private readonly statusMessage = signal<string | null>(null);
+  private readonly statusType = signal<'idle' | 'success' | 'error'>('idle');
+  readonly isProcessing = signal(false);
+  readonly highlights = [
+    'Прогрес тренувань у реальному часі',
+    'Офлайн режим з автоматичною синхронізацією',
+    'Інтеграція з хмарними сервісами та пристроями'
+  ];
+  readonly isPushSupported = this.pushNotifications.isSupported();
+  readonly bannerType = computed(() => this.statusType());
+  readonly bannerMessage = computed(() => this.statusMessage());
+
+  constructor(private readonly pushNotifications: PushNotificationService) {}
+
+  async enableNotifications(): Promise<void> {
+    if (this.isProcessing()) {
+      return;
+    }
+
+    this.isProcessing.set(true);
+    this.statusType.set('idle');
+    this.statusMessage.set(null);
+
+    try {
+      await this.pushNotifications.subscribe();
+      this.statusType.set('success');
+      this.statusMessage.set('Push сповіщення активовані. Дякуємо!');
+    } catch (error) {
+      this.statusType.set('error');
+      this.statusMessage.set(this.pushNotifications.describeError(error));
+    } finally {
+      this.isProcessing.set(false);
+    }
+  }
+}
diff --git a/fittrack-ua/projects/pwa/src/assets/icons/icon-128x128.png b/fittrack-ua/projects/pwa/src/assets/icons/icon-128x128.png
new file mode 100644
index 0000000000000000000000000000000000000000..63ec10646ca934705d2825b2dbbfca79199f1f60
GIT binary patch
literal 299
zcmeAS@N?(olHy`uVBq!ia0vp^4Is?H1|$#LC7uRSpFCY0Ln>~)y=2JCz`$|9ASXd&
zp#+n(%9k09ODA4kyuX!`L4vV?L4bkDfq{d8QGtPF;5ZBn!VCsX6gt8@YWr@EmtFjZ
QFBpKp)78&qol`;+0FYQK#{d8T

literal 0
HcmV?d00001

diff --git a/fittrack-ua/projects/pwa/src/assets/icons/icon-144x144.png b/fittrack-ua/projects/pwa/src/assets/icons/icon-144x144.png
new file mode 100644
index 0000000000000000000000000000000000000000..30e4cc5828363bcf988f0a877bd8d6efdbe0906d
GIT binary patch
literal 333
zcmeAS@N?(olHy`uVBq!ia0vp^6F``Q4M;wBd$farfl<WM#WAGf*4s;lybKH+2Mlr&
zL>5Xg@y}V}&a2bCMs5d}pn(9}AqNQ#o|Z-+i-|c=0mwQ46accIQp}AYsY4D4ASnX@
wuoMpqSQkPOE%fuKKy4w{0Weo0>;I9)sFRiLD4r7cngIwrUHx3vIVCg!04(fH-T(jq

literal 0
HcmV?d00001

diff --git a/fittrack-ua/projects/pwa/src/assets/icons/icon-152x152.png b/fittrack-ua/projects/pwa/src/assets/icons/icon-152x152.png
new file mode 100644
index 0000000000000000000000000000000000000000..b57e16bfd900b415879a514c0491b3ba44390891
GIT binary patch
literal 352
zcmeAS@N?(olHy`uVBq!ia0vp^GeDSw4M<8HQcz@IU{v>XaSW-r_4bmZAOiyngQKa4
zXozCahg-+RcI-Uys!>~!iS2Mgf&ow4!2<~rJk5;<4J6o@n-dLy6uLN2npkn5aRw4-
z>RUh-U`nt7?ZFUN0=fu`1ju1%;&2BO7Dx3UM7<9O*yn$uZi=LI$4#!72Mjp|Pgg&e
IbxsLQ01j+sR{#J2

literal 0
HcmV?d00001

diff --git a/fittrack-ua/projects/pwa/src/assets/icons/icon-192x192.png b/fittrack-ua/projects/pwa/src/assets/icons/icon-192x192.png
new file mode 100644
index 0000000000000000000000000000000000000000..de125e50e9f6c80d2d206ecfeda512368aed5999
GIT binary patch
literal 450
zcmeAS@N?(olHy`uVBq!ia0vp^2SAvE4M+yv$zf+;VC?jCaSW-r_4cwMF9QR|0fU?b
zk%baW!Zlx3G^%#5k^7<La)2R$!GJ-6fro*Ofw_T^>RdJfMp_t)<X|KwExdAoL5Xr>
a^>m}sM7Zmo9909x4TGnvpUXO@geCwQ2}#rd

literal 0
HcmV?d00001

diff --git a/fittrack-ua/projects/pwa/src/assets/icons/icon-384x384.png b/fittrack-ua/projects/pwa/src/assets/icons/icon-384x384.png
new file mode 100644
index 0000000000000000000000000000000000000000..4c496e9f714507645530e9a93de6a1fc859ec38a
GIT binary patch
literal 1146
zcmeAS@N?(olHy`uVBq!ia0y~yU~B+k4mP03lH*(VGcd3?db&7<RNQ)d)lm@0V{l}B
zGATHyNaFVmrtdpXykdMXUx4ud1A_qr0}lfOGXptHa`Yfsb%4QzBI|)hQQ~^Ac0uxe
z5Ag}vfd|#@zyV>9?-TOk4sI)j+Ih%IIdI#lpnWtE@i?#`1t?ieEU7>*Qt_ta8;<1)
R|AA!+gQu&X%Q~loCID`xeUAVD

literal 0
HcmV?d00001

diff --git a/fittrack-ua/projects/pwa/src/assets/icons/icon-512x512.png b/fittrack-ua/projects/pwa/src/assets/icons/icon-512x512.png
new file mode 100644
index 0000000000000000000000000000000000000000..531a160241dfccfb17b8cb8cfb7ca72ff5486fe7
GIT binary patch
literal 1820
zcmeAS@N?(olHy`uVBq!ia0y~yU;;9k7&zE~)R&4YzZe+U9(%ethE&{od(DuMfq{j=
zk@d->;2^IXcM4eRew}#5$WX^A$Z!Ct9H_;BfuRAYh=+k80Vu%Cz#zduK#D}=NR|*|
zI+AjPo5*q}$RwTy0iykdYO@5xXb=%d6{A5!Fyo8{(P$9Ciqp}uh+vIFbPzo_$8`E?
Wsi8&A!NovB89ZJ6T-G@yGywo*8lOD?

literal 0
HcmV?d00001

diff --git a/fittrack-ua/projects/pwa/src/assets/icons/icon-72x72.png b/fittrack-ua/projects/pwa/src/assets/icons/icon-72x72.png
new file mode 100644
index 0000000000000000000000000000000000000000..c7d1bcbeaff7b2b284faa9cdb383bea395d686c6
GIT binary patch
literal 171
zcmeAS@N?(olHy`uVBq!ia0vp^9w5xY1|&n@ZgvM!MV>B>Ar-gYUNB^2U|?Y|FclFE
zQ55<iYaNy_@#<k+6%HX4j|mEnO)QEKic_cs#Nz}C3qUB4tN>IIrxRE$P?iI#2*^h@
bB3{Sus?^2RP2xsC+ZjAv{an^LB{Ts53C1Zi

literal 0
HcmV?d00001

diff --git a/fittrack-ua/projects/pwa/src/assets/icons/icon-96x96.png b/fittrack-ua/projects/pwa/src/assets/icons/icon-96x96.png
new file mode 100644
index 0000000000000000000000000000000000000000..01e1cc4c093a04e13cb59a7c1dd900821a234c51
GIT binary patch
literal 216
zcmeAS@N?(olHy`uVBq!ia0vp^2_VeD1|%QND7OGo^F3W0Ln>~)y=chGz`$|9ASXd&
zp#+np%97(eYbIV@y!#Lf0|N^~0|SEq0|OI-15gbE10#b1Wr7R`h%@y-yO`J2mOr)s
SeI@{%%HZkh=d#Wzp$P!J3nL@|

literal 0
HcmV?d00001

diff --git a/fittrack-ua/projects/pwa/src/environments/environment.prod.ts b/fittrack-ua/projects/pwa/src/environments/environment.prod.ts
new file mode 100644
index 0000000000000000000000000000000000000000..dcfc9211467ef9fe3b85b22b1a912396606d3aea
--- /dev/null
+++ b/fittrack-ua/projects/pwa/src/environments/environment.prod.ts
@@ -0,0 +1,4 @@
+export const environment = {
+  production: true,
+  vapidPublicKey: 'BFhPDHCu0AynoHQ9bhnNHmgZpEUnGCigDI_drqKis3uLYcF3oQ5tGeKNPkD_QqvAhFZ6e1HisI0Mn-4OxqmsrPQ'
+};
diff --git a/fittrack-ua/projects/pwa/src/environments/environment.ts b/fittrack-ua/projects/pwa/src/environments/environment.ts
new file mode 100644
index 0000000000000000000000000000000000000000..8621fb58e48408791ba5a31c77728e12a5ff8495
--- /dev/null
+++ b/fittrack-ua/projects/pwa/src/environments/environment.ts
@@ -0,0 +1,4 @@
+export const environment = {
+  production: false,
+  vapidPublicKey: 'BFhPDHCu0AynoHQ9bhnNHmgZpEUnGCigDI_drqKis3uLYcF3oQ5tGeKNPkD_QqvAhFZ6e1HisI0Mn-4OxqmsrPQ'
+};
diff --git a/fittrack-ua/projects/pwa/src/favicon.png b/fittrack-ua/projects/pwa/src/favicon.png
new file mode 100644
index 0000000000000000000000000000000000000000..802a40cc6bb3fd01bab7e46bec7c427127a28505
GIT binary patch
literal 158
zcmeAS@N?(olHy`uVBq!ia0vp^4j|0I1|(Ny7TyC=sh%#5Ar-gYUT_p-U|?Y|FclFE
wQ7p2kUUNWc_4CaF3Jwhnj7%&X6fxdKM>#TC8##7X04-$jboFyt=akR{0L_FSC;$Ke

literal 0
HcmV?d00001

diff --git a/fittrack-ua/projects/pwa/src/index.html b/fittrack-ua/projects/pwa/src/index.html
new file mode 100644
index 0000000000000000000000000000000000000000..4f65385d4939d25dd6f4f1d2d9b3aa13c41b3ccc
--- /dev/null
+++ b/fittrack-ua/projects/pwa/src/index.html
@@ -0,0 +1,16 @@
+<!doctype html>
+<html lang="uk">
+  <head>
+    <meta charset="utf-8" />
+    <title>FitTrack PWA</title>
+    <base href="/" />
+    <meta name="viewport" content="width=device-width, initial-scale=1" />
+    <meta name="theme-color" content="#1976d2" />
+    <link rel="icon" type="image/png" href="favicon.png" />
+    <link rel="manifest" href="manifest.webmanifest" />
+  </head>
+  <body>
+    <app-root></app-root>
+    <noscript>Потрібно увімкнути JavaScript для запуску цієї програми.</noscript>
+  </body>
+</html>
diff --git a/fittrack-ua/projects/pwa/src/main.ts b/fittrack-ua/projects/pwa/src/main.ts
new file mode 100644
index 0000000000000000000000000000000000000000..7205a13df94cc9e1949c07ac16454fc4faf8b564
--- /dev/null
+++ b/fittrack-ua/projects/pwa/src/main.ts
@@ -0,0 +1,5 @@
+import { bootstrapApplication } from '@angular/platform-browser';
+import { AppComponent } from './app/app.component';
+import { appConfig } from './app/app.config';
+
+bootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));
diff --git a/fittrack-ua/projects/pwa/src/manifest.webmanifest b/fittrack-ua/projects/pwa/src/manifest.webmanifest
new file mode 100644
index 0000000000000000000000000000000000000000..809c70f3ed7ffd05e057b3fd031816daad1bdfd4
--- /dev/null
+++ b/fittrack-ua/projects/pwa/src/manifest.webmanifest
@@ -0,0 +1,51 @@
+{
+  "name": "FitTrack UA",
+  "short_name": "FitTrack",
+  "start_url": "/",
+  "display": "standalone",
+  "background_color": "#ffffff",
+  "theme_color": "#1976d2",
+  "description": "Прогресивний фітнес-трекер з офлайн синхронізацією та інтеграціями.",
+  "icons": [
+    {
+      "src": "assets/icons/icon-72x72.png",
+      "sizes": "72x72",
+      "type": "image/png"
+    },
+    {
+      "src": "assets/icons/icon-96x96.png",
+      "sizes": "96x96",
+      "type": "image/png"
+    },
+    {
+      "src": "assets/icons/icon-128x128.png",
+      "sizes": "128x128",
+      "type": "image/png"
+    },
+    {
+      "src": "assets/icons/icon-144x144.png",
+      "sizes": "144x144",
+      "type": "image/png"
+    },
+    {
+      "src": "assets/icons/icon-152x152.png",
+      "sizes": "152x152",
+      "type": "image/png"
+    },
+    {
+      "src": "assets/icons/icon-192x192.png",
+      "sizes": "192x192",
+      "type": "image/png"
+    },
+    {
+      "src": "assets/icons/icon-384x384.png",
+      "sizes": "384x384",
+      "type": "image/png"
+    },
+    {
+      "src": "assets/icons/icon-512x512.png",
+      "sizes": "512x512",
+      "type": "image/png"
+    }
+  ]
+}
diff --git a/fittrack-ua/projects/pwa/src/styles.scss b/fittrack-ua/projects/pwa/src/styles.scss
new file mode 100644
index 0000000000000000000000000000000000000000..a8cbad6bc9ed7a853dd92475fa1dbf9651616c07
--- /dev/null
+++ b/fittrack-ua/projects/pwa/src/styles.scss
@@ -0,0 +1,16 @@
+:root {
+  font-family: "Inter", "Helvetica Neue", Arial, sans-serif;
+  color: #1f2933;
+  background-color: #f8fafc;
+}
+
+body,
+html {
+  margin: 0;
+  padding: 0;
+  min-height: 100%;
+}
+
+* {
+  box-sizing: border-box;
+}
diff --git a/fittrack-ua/projects/pwa/src/test.ts b/fittrack-ua/projects/pwa/src/test.ts
new file mode 100644
index 0000000000000000000000000000000000000000..6d433e5e39dc776fbd7c02375c28694f536166cd
--- /dev/null
+++ b/fittrack-ua/projects/pwa/src/test.ts
@@ -0,0 +1,5 @@
+import 'zone.js/testing';
+import { getTestBed } from '@angular/core/testing';
+import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
+
+getTestBed().initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
diff --git a/fittrack-ua/projects/pwa/tsconfig.app.json b/fittrack-ua/projects/pwa/tsconfig.app.json
new file mode 100644
index 0000000000000000000000000000000000000000..7e3673ee9c026f166aca8734811dee1f649194a3
--- /dev/null
+++ b/fittrack-ua/projects/pwa/tsconfig.app.json
@@ -0,0 +1,17 @@
+{
+  "extends": "../../tsconfig.base.json",
+  "compilerOptions": {
+    "outDir": "../../dist/out-tsc/app",
+    "types": []
+  },
+  "files": [
+    "src/main.ts"
+  ],
+  "include": [
+    "src/**/*.d.ts"
+  ],
+  "exclude": [
+    "src/test.ts",
+    "src/**/*.spec.ts"
+  ]
+}
diff --git a/fittrack-ua/projects/pwa/tsconfig.editor.json b/fittrack-ua/projects/pwa/tsconfig.editor.json
new file mode 100644
index 0000000000000000000000000000000000000000..1b333a427797bc3cfa98790bdb94b240ecf16c5c
--- /dev/null
+++ b/fittrack-ua/projects/pwa/tsconfig.editor.json
@@ -0,0 +1,10 @@
+{
+  "extends": "../../tsconfig.base.json",
+  "compilerOptions": {
+    "outDir": "../../dist/out-tsc/editor"
+  },
+  "include": [
+    "src/**/*.ts",
+    "src/**/*.tsx"
+  ]
+}
diff --git a/fittrack-ua/projects/pwa/tsconfig.spec.json b/fittrack-ua/projects/pwa/tsconfig.spec.json
new file mode 100644
index 0000000000000000000000000000000000000000..dbce3697a104990866dfa55dd3db76da2aa7a0d9
--- /dev/null
+++ b/fittrack-ua/projects/pwa/tsconfig.spec.json
@@ -0,0 +1,17 @@
+{
+  "extends": "./tsconfig.app.json",
+  "compilerOptions": {
+    "outDir": "../../dist/out-tsc/spec",
+    "module": "commonjs",
+    "types": [
+      "jasmine"
+    ]
+  },
+  "files": [
+    "src/test.ts"
+  ],
+  "include": [
+    "src/**/*.spec.ts",
+    "src/**/*.d.ts"
+  ]
+}
diff --git a/fittrack-ua/projects/sync-engine/karma.conf.js b/fittrack-ua/projects/sync-engine/karma.conf.js
new file mode 100644
index 0000000000000000000000000000000000000000..3bc711287e3e2eba276920dfe05799410e83c6b6
--- /dev/null
+++ b/fittrack-ua/projects/sync-engine/karma.conf.js
@@ -0,0 +1,38 @@
+const { join } = require('path');
+const { constants } = require('karma');
+
+module.exports = function (config) {
+  config.set({
+    basePath: '',
+    frameworks: ['jasmine', '@angular-devkit/build-angular'],
+    plugins: [
+      require('karma-jasmine'),
+      require('karma-chrome-launcher'),
+      require('karma-jasmine-html-reporter'),
+      require('karma-coverage'),
+      require('@angular-devkit/build-angular/plugins/karma')
+    ],
+    client: {
+      jasmine: {
+        random: false
+      },
+      clearContext: false
+    },
+    coverageReporter: {
+      dir: join(__dirname, '../../coverage/sync-engine'),
+      subdir: '.',
+      reporters: [
+        { type: 'html' },
+        { type: 'text-summary' }
+      ]
+    },
+    reporters: ['progress', 'kjhtml'],
+    port: 9876,
+    colors: true,
+    logLevel: constants.LOG_INFO,
+    autoWatch: true,
+    browsers: ['ChromeHeadless'],
+    singleRun: false,
+    restartOnFileChange: true
+  });
+};
diff --git a/fittrack-ua/projects/sync-engine/ng-package.json b/fittrack-ua/projects/sync-engine/ng-package.json
new file mode 100644
index 0000000000000000000000000000000000000000..b5bf7f245a27962992a5a83f1a9b76f4121b9e08
--- /dev/null
+++ b/fittrack-ua/projects/sync-engine/ng-package.json
@@ -0,0 +1,7 @@
+{
+  "$schema": "../../node_modules/ng-packagr/ng-package.schema.json",
+  "dest": "../../dist/sync-engine",
+  "lib": {
+    "entryFile": "src/index.ts"
+  }
+}
diff --git a/fittrack-ua/projects/sync-engine/package.json b/fittrack-ua/projects/sync-engine/package.json
new file mode 100644
index 0000000000000000000000000000000000000000..63d2bce4bfaefd007e2c75f044013772b635bbe2
--- /dev/null
+++ b/fittrack-ua/projects/sync-engine/package.json
@@ -0,0 +1,8 @@
+{
+  "name": "@fittrack/sync-engine",
+  "version": "0.0.1",
+  "peerDependencies": {
+    "@angular/common": "^17.0.0",
+    "@angular/core": "^17.0.0"
+  }
+}
diff --git a/fittrack-ua/projects/sync-engine/project.json b/fittrack-ua/projects/sync-engine/project.json
new file mode 100644
index 0000000000000000000000000000000000000000..b638069b499ee048e3b1ef8a54c765ec74ee2841
--- /dev/null
+++ b/fittrack-ua/projects/sync-engine/project.json
@@ -0,0 +1,35 @@
+{
+  "$schema": "../../node_modules/@angular/cli/lib/config/project-schema.json",
+  "projectType": "library",
+  "root": "projects/sync-engine",
+  "sourceRoot": "projects/sync-engine/src",
+  "prefix": "fittrack",
+  "architect": {
+    "build": {
+      "builder": "@angular-devkit/build-angular:ng-packagr",
+      "options": {
+        "project": "projects/sync-engine/ng-package.json"
+      },
+      "configurations": {
+        "production": {
+          "tsConfig": "projects/sync-engine/tsconfig.lib.prod.json"
+        },
+        "development": {
+          "tsConfig": "projects/sync-engine/tsconfig.lib.json"
+        }
+      },
+      "defaultConfiguration": "production"
+    },
+    "test": {
+      "builder": "@angular-devkit/build-angular:karma",
+      "options": {
+        "tsConfig": "projects/sync-engine/tsconfig.spec.json",
+        "karmaConfig": "projects/sync-engine/karma.conf.js",
+        "polyfills": [
+          "zone.js",
+          "zone.js/testing"
+        ]
+      }
+    }
+  }
+}
diff --git a/fittrack-ua/projects/sync-engine/src/index.ts b/fittrack-ua/projects/sync-engine/src/index.ts
new file mode 100644
index 0000000000000000000000000000000000000000..73c130d8021cdb174ac5a0d0bb189e5575905986
--- /dev/null
+++ b/fittrack-ua/projects/sync-engine/src/index.ts
@@ -0,0 +1 @@
+export * from './lib/sync-engine.service';
diff --git a/fittrack-ua/projects/sync-engine/src/lib/sync-engine.service.spec.ts b/fittrack-ua/projects/sync-engine/src/lib/sync-engine.service.spec.ts
new file mode 100644
index 0000000000000000000000000000000000000000..3a51ba42c7aeea64bd877f6ba8dfab6f0ca4eca7
--- /dev/null
+++ b/fittrack-ua/projects/sync-engine/src/lib/sync-engine.service.spec.ts
@@ -0,0 +1,31 @@
+import { SyncEngine } from './sync-engine.service';
+
+describe('SyncEngine', () => {
+  let engine: SyncEngine;
+
+  beforeEach(() => {
+    engine = new SyncEngine();
+  });
+
+  it('should enqueue new jobs', () => {
+    engine.schedule({ id: '1', payload: {} });
+    expect(engine.peek().length).toBe(1);
+  });
+
+  it('should replace existing jobs with same id', () => {
+    engine.schedule({ id: '1', payload: { foo: 'bar' } });
+    engine.schedule({ id: '1', payload: { foo: 'baz' } });
+
+    expect(engine.peek().length).toBe(1);
+    expect(engine.peek()[0].payload).toEqual({ foo: 'baz' });
+  });
+
+  it('should drain queue and return jobs', () => {
+    engine.schedule({ id: '1', payload: {} });
+    engine.schedule({ id: '2', payload: {} });
+
+    const jobs = engine.drain();
+    expect(jobs.length).toBe(2);
+    expect(engine.peek().length).toBe(0);
+  });
+});
diff --git a/fittrack-ua/projects/sync-engine/src/lib/sync-engine.service.ts b/fittrack-ua/projects/sync-engine/src/lib/sync-engine.service.ts
new file mode 100644
index 0000000000000000000000000000000000000000..1345fc9d8002d66fcd8206682b9ccaba220a7c94
--- /dev/null
+++ b/fittrack-ua/projects/sync-engine/src/lib/sync-engine.service.ts
@@ -0,0 +1,30 @@
+import { Injectable } from '@angular/core';
+
+export interface SyncJob<T = unknown> {
+  id: string;
+  payload: T;
+  lastRun?: Date;
+}
+
+@Injectable({ providedIn: 'root' })
+export class SyncEngine {
+  private readonly queue: SyncJob[] = [];
+
+  schedule<T>(job: SyncJob<T>): void {
+    const existingIndex = this.queue.findIndex((item) => item.id === job.id);
+    if (existingIndex !== -1) {
+      this.queue[existingIndex] = { ...job, lastRun: new Date() };
+      return;
+    }
+
+    this.queue.push({ ...job, lastRun: new Date() });
+  }
+
+  drain(): SyncJob[] {
+    return this.queue.splice(0);
+  }
+
+  peek(): readonly SyncJob[] {
+    return this.queue;
+  }
+}
diff --git a/fittrack-ua/projects/sync-engine/src/test.ts b/fittrack-ua/projects/sync-engine/src/test.ts
new file mode 100644
index 0000000000000000000000000000000000000000..6d433e5e39dc776fbd7c02375c28694f536166cd
--- /dev/null
+++ b/fittrack-ua/projects/sync-engine/src/test.ts
@@ -0,0 +1,5 @@
+import 'zone.js/testing';
+import { getTestBed } from '@angular/core/testing';
+import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
+
+getTestBed().initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
diff --git a/fittrack-ua/projects/sync-engine/tsconfig.lib.json b/fittrack-ua/projects/sync-engine/tsconfig.lib.json
new file mode 100644
index 0000000000000000000000000000000000000000..e79c5d217044bdbb7e980b3401d1643f2eaed72c
--- /dev/null
+++ b/fittrack-ua/projects/sync-engine/tsconfig.lib.json
@@ -0,0 +1,12 @@
+{
+  "extends": "../../tsconfig.base.json",
+  "compilerOptions": {
+    "outDir": "../../dist/out-tsc/sync-engine",
+    "declaration": true,
+    "declarationMap": true,
+    "inlineSources": true,
+    "types": []
+  },
+  "exclude": ["src/test.ts", "**/*.spec.ts"],
+  "include": ["src/**/*.ts"]
+}
diff --git a/fittrack-ua/projects/sync-engine/tsconfig.lib.prod.json b/fittrack-ua/projects/sync-engine/tsconfig.lib.prod.json
new file mode 100644
index 0000000000000000000000000000000000000000..46634e44fb153911226d1dd80ebbab8a1757a1be
--- /dev/null
+++ b/fittrack-ua/projects/sync-engine/tsconfig.lib.prod.json
@@ -0,0 +1,6 @@
+{
+  "extends": "./tsconfig.lib.json",
+  "compilerOptions": {
+    "declarationMap": false
+  }
+}
diff --git a/fittrack-ua/projects/sync-engine/tsconfig.spec.json b/fittrack-ua/projects/sync-engine/tsconfig.spec.json
new file mode 100644
index 0000000000000000000000000000000000000000..952c9ae1bde9bb2477bdbaa61ce4ea92c993e605
--- /dev/null
+++ b/fittrack-ua/projects/sync-engine/tsconfig.spec.json
@@ -0,0 +1,10 @@
+{
+  "extends": "../../tsconfig.base.json",
+  "compilerOptions": {
+    "outDir": "../../dist/out-tsc/sync-engine-spec",
+    "module": "commonjs",
+    "types": ["jasmine", "node"]
+  },
+  "files": ["src/test.ts"],
+  "include": ["src/**/*.spec.ts", "src/**/*.d.ts"]
+}
diff --git a/fittrack-ua/projects/ui/karma.conf.js b/fittrack-ua/projects/ui/karma.conf.js
new file mode 100644
index 0000000000000000000000000000000000000000..468e0dccd747f8c799d4e7f96c65b6357c425aa8
--- /dev/null
+++ b/fittrack-ua/projects/ui/karma.conf.js
@@ -0,0 +1,38 @@
+const { join } = require('path');
+const { constants } = require('karma');
+
+module.exports = function (config) {
+  config.set({
+    basePath: '',
+    frameworks: ['jasmine', '@angular-devkit/build-angular'],
+    plugins: [
+      require('karma-jasmine'),
+      require('karma-chrome-launcher'),
+      require('karma-jasmine-html-reporter'),
+      require('karma-coverage'),
+      require('@angular-devkit/build-angular/plugins/karma')
+    ],
+    client: {
+      jasmine: {
+        random: false
+      },
+      clearContext: false
+    },
+    coverageReporter: {
+      dir: join(__dirname, '../../coverage/ui'),
+      subdir: '.',
+      reporters: [
+        { type: 'html' },
+        { type: 'text-summary' }
+      ]
+    },
+    reporters: ['progress', 'kjhtml'],
+    port: 9876,
+    colors: true,
+    logLevel: constants.LOG_INFO,
+    autoWatch: true,
+    browsers: ['ChromeHeadless'],
+    singleRun: false,
+    restartOnFileChange: true
+  });
+};
diff --git a/fittrack-ua/projects/ui/ng-package.json b/fittrack-ua/projects/ui/ng-package.json
new file mode 100644
index 0000000000000000000000000000000000000000..c0e536855e1111dca977859f32c365542505301e
--- /dev/null
+++ b/fittrack-ua/projects/ui/ng-package.json
@@ -0,0 +1,7 @@
+{
+  "$schema": "../../node_modules/ng-packagr/ng-package.schema.json",
+  "dest": "../../dist/ui",
+  "lib": {
+    "entryFile": "src/index.ts"
+  }
+}
diff --git a/fittrack-ua/projects/ui/package.json b/fittrack-ua/projects/ui/package.json
new file mode 100644
index 0000000000000000000000000000000000000000..f81ed9ae3d31c599e9a0c5bf57e5e87bbb536faa
--- /dev/null
+++ b/fittrack-ua/projects/ui/package.json
@@ -0,0 +1,8 @@
+{
+  "name": "@fittrack/ui",
+  "version": "0.0.1",
+  "peerDependencies": {
+    "@angular/common": "^17.0.0",
+    "@angular/core": "^17.0.0"
+  }
+}
diff --git a/fittrack-ua/projects/ui/project.json b/fittrack-ua/projects/ui/project.json
new file mode 100644
index 0000000000000000000000000000000000000000..a4b48c76e1a58c89bf71b04bd9ed88230bc21e7d
--- /dev/null
+++ b/fittrack-ua/projects/ui/project.json
@@ -0,0 +1,35 @@
+{
+  "$schema": "../../node_modules/@angular/cli/lib/config/project-schema.json",
+  "projectType": "library",
+  "root": "projects/ui",
+  "sourceRoot": "projects/ui/src",
+  "prefix": "fittrack",
+  "architect": {
+    "build": {
+      "builder": "@angular-devkit/build-angular:ng-packagr",
+      "options": {
+        "project": "projects/ui/ng-package.json"
+      },
+      "configurations": {
+        "production": {
+          "tsConfig": "projects/ui/tsconfig.lib.prod.json"
+        },
+        "development": {
+          "tsConfig": "projects/ui/tsconfig.lib.json"
+        }
+      },
+      "defaultConfiguration": "production"
+    },
+    "test": {
+      "builder": "@angular-devkit/build-angular:karma",
+      "options": {
+        "tsConfig": "projects/ui/tsconfig.spec.json",
+        "karmaConfig": "projects/ui/karma.conf.js",
+        "polyfills": [
+          "zone.js",
+          "zone.js/testing"
+        ]
+      }
+    }
+  }
+}
diff --git a/fittrack-ua/projects/ui/src/index.ts b/fittrack-ua/projects/ui/src/index.ts
new file mode 100644
index 0000000000000000000000000000000000000000..782344ee186d84c272dfd72a65e26f0b15db72ff
--- /dev/null
+++ b/fittrack-ua/projects/ui/src/index.ts
@@ -0,0 +1 @@
+export * from './lib/ui-toolkit.module';
diff --git a/fittrack-ua/projects/ui/src/lib/ui-toolkit.module.spec.ts b/fittrack-ua/projects/ui/src/lib/ui-toolkit.module.spec.ts
new file mode 100644
index 0000000000000000000000000000000000000000..9c3b8043eb31e1416a2e6afd6756e325341201c5
--- /dev/null
+++ b/fittrack-ua/projects/ui/src/lib/ui-toolkit.module.spec.ts
@@ -0,0 +1,32 @@
+import { Component } from '@angular/core';
+import { TestBed } from '@angular/core/testing';
+import { FitButtonComponent, UiToolkitModule } from './ui-toolkit.module';
+
+@Component({
+  selector: 'test-host',
+  standalone: true,
+  imports: [UiToolkitModule],
+  template: `<fit-button>Test</fit-button>`
+})
+class HostComponent {}
+
+describe('UiToolkitModule', () => {
+  beforeEach(async () => {
+    await TestBed.configureTestingModule({
+      imports: [HostComponent]
+    }).compileComponents();
+  });
+
+  it('should render projected content in fit-button', () => {
+    const fixture = TestBed.createComponent(HostComponent);
+    fixture.detectChanges();
+    const button = fixture.nativeElement.querySelector('fit-button button') as HTMLButtonElement;
+    expect(button.textContent?.trim()).toBe('Test');
+  });
+
+  it('should expose FitButtonComponent as a standalone component', () => {
+    const fixture = TestBed.createComponent(FitButtonComponent);
+    fixture.detectChanges();
+    expect(fixture.componentInstance).toBeInstanceOf(FitButtonComponent);
+  });
+});
diff --git a/fittrack-ua/projects/ui/src/lib/ui-toolkit.module.ts b/fittrack-ua/projects/ui/src/lib/ui-toolkit.module.ts
new file mode 100644
index 0000000000000000000000000000000000000000..05795c51416f37d93aac82452b13f853b81990f9
--- /dev/null
+++ b/fittrack-ua/projects/ui/src/lib/ui-toolkit.module.ts
@@ -0,0 +1,22 @@
+import { CommonModule } from '@angular/common';
+import { Component, NgModule } from '@angular/core';
+
+@Component({
+  selector: 'fit-button',
+  standalone: true,
+  imports: [CommonModule],
+  template: `<button class="fit-button" type="button"><ng-content></ng-content></button>`,
+  styles: [
+    `:host{display:inline-block}`,
+    `.fit-button{padding:0.75rem 1.75rem;border-radius:999px;border:none;background:linear-gradient(135deg,#0d47a1,#42a5f5);color:#fff;font-weight:600;cursor:pointer;transition:filter 150ms ease-in-out;}`,
+    `.fit-button:focus{outline:3px solid rgba(66,165,245,.45);outline-offset:3px;}`,
+    `.fit-button:hover{filter:brightness(1.05);}`
+  ]
+})
+export class FitButtonComponent {}
+
+@NgModule({
+  imports: [CommonModule, FitButtonComponent],
+  exports: [FitButtonComponent]
+})
+export class UiToolkitModule {}
diff --git a/fittrack-ua/projects/ui/src/test.ts b/fittrack-ua/projects/ui/src/test.ts
new file mode 100644
index 0000000000000000000000000000000000000000..6d433e5e39dc776fbd7c02375c28694f536166cd
--- /dev/null
+++ b/fittrack-ua/projects/ui/src/test.ts
@@ -0,0 +1,5 @@
+import 'zone.js/testing';
+import { getTestBed } from '@angular/core/testing';
+import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
+
+getTestBed().initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
diff --git a/fittrack-ua/projects/ui/tsconfig.lib.json b/fittrack-ua/projects/ui/tsconfig.lib.json
new file mode 100644
index 0000000000000000000000000000000000000000..44cf46b04e563664a6c43752b85f87751f95e0d1
--- /dev/null
+++ b/fittrack-ua/projects/ui/tsconfig.lib.json
@@ -0,0 +1,12 @@
+{
+  "extends": "../../tsconfig.base.json",
+  "compilerOptions": {
+    "outDir": "../../dist/out-tsc/ui",
+    "declaration": true,
+    "declarationMap": true,
+    "inlineSources": true,
+    "types": []
+  },
+  "exclude": ["src/test.ts", "**/*.spec.ts"],
+  "include": ["src/**/*.ts"]
+}
diff --git a/fittrack-ua/projects/ui/tsconfig.lib.prod.json b/fittrack-ua/projects/ui/tsconfig.lib.prod.json
new file mode 100644
index 0000000000000000000000000000000000000000..46634e44fb153911226d1dd80ebbab8a1757a1be
--- /dev/null
+++ b/fittrack-ua/projects/ui/tsconfig.lib.prod.json
@@ -0,0 +1,6 @@
+{
+  "extends": "./tsconfig.lib.json",
+  "compilerOptions": {
+    "declarationMap": false
+  }
+}
diff --git a/fittrack-ua/projects/ui/tsconfig.spec.json b/fittrack-ua/projects/ui/tsconfig.spec.json
new file mode 100644
index 0000000000000000000000000000000000000000..4e74569b182aee9eb48b0afe0f7926cec6d7c225
--- /dev/null
+++ b/fittrack-ua/projects/ui/tsconfig.spec.json
@@ -0,0 +1,10 @@
+{
+  "extends": "../../tsconfig.base.json",
+  "compilerOptions": {
+    "outDir": "../../dist/out-tsc/ui-spec",
+    "module": "commonjs",
+    "types": ["jasmine", "node"]
+  },
+  "files": ["src/test.ts"],
+  "include": ["src/**/*.spec.ts", "src/**/*.d.ts"]
+}
diff --git a/fittrack-ua/tsconfig.base.json b/fittrack-ua/tsconfig.base.json
new file mode 100644
index 0000000000000000000000000000000000000000..01400231c8b526625f5d090fe95c32d269d5b730
--- /dev/null
+++ b/fittrack-ua/tsconfig.base.json
@@ -0,0 +1,51 @@
+{
+  "compileOnSave": false,
+  "compilerOptions": {
+    "baseUrl": "./",
+    "module": "es2022",
+    "moduleResolution": "node",
+    "outDir": "./dist/out-tsc",
+    "target": "es2022",
+    "useDefineForClassFields": false,
+    "declaration": false,
+    "experimentalDecorators": true,
+    "emitDecoratorMetadata": true,
+    "importHelpers": true,
+    "strict": true,
+    "noImplicitReturns": true,
+    "noFallthroughCasesInSwitch": true,
+    "resolveJsonModule": true,
+    "allowSyntheticDefaultImports": true,
+    "typeRoots": [
+      "node_modules/@types"
+    ],
+    "lib": [
+      "ES2022",
+      "DOM",
+      "DOM.Iterable"
+    ],
+    "paths": {
+      "@fittrack/data-core": [
+        "projects/data-core/src/index.ts"
+      ],
+      "@fittrack/crypto": [
+        "projects/crypto/src/index.ts"
+      ],
+      "@fittrack/sync-engine": [
+        "projects/sync-engine/src/index.ts"
+      ],
+      "@fittrack/cloud-connectors": [
+        "projects/cloud-connectors/src/index.ts"
+      ],
+      "@fittrack/ui": [
+        "projects/ui/src/index.ts"
+      ]
+    }
+  },
+  "angularCompilerOptions": {
+    "enableI18nLegacyMessageIdFormat": false,
+    "strictInjectionParameters": true,
+    "strictInputAccessModifiers": true,
+    "strictTemplates": true
+  }
+}
diff --git a/fittrack-ua/tsconfig.json b/fittrack-ua/tsconfig.json
new file mode 100644
index 0000000000000000000000000000000000000000..9e1862dfaf1b04de388fca7e998f01af3e97a885
--- /dev/null
+++ b/fittrack-ua/tsconfig.json
@@ -0,0 +1,48 @@
+{
+  "extends": "./tsconfig.base.json",
+  "compilerOptions": {
+    "outDir": "./dist/out-tsc"
+  },
+  "files": [],
+  "references": [
+    {
+      "path": "./projects/pwa/tsconfig.app.json"
+    },
+    {
+      "path": "./projects/pwa/tsconfig.spec.json"
+    },
+    {
+      "path": "./projects/pwa/tsconfig.editor.json"
+    },
+    {
+      "path": "./projects/data-core/tsconfig.lib.json"
+    },
+    {
+      "path": "./projects/data-core/tsconfig.spec.json"
+    },
+    {
+      "path": "./projects/crypto/tsconfig.lib.json"
+    },
+    {
+      "path": "./projects/crypto/tsconfig.spec.json"
+    },
+    {
+      "path": "./projects/sync-engine/tsconfig.lib.json"
+    },
+    {
+      "path": "./projects/sync-engine/tsconfig.spec.json"
+    },
+    {
+      "path": "./projects/cloud-connectors/tsconfig.lib.json"
+    },
+    {
+      "path": "./projects/cloud-connectors/tsconfig.spec.json"
+    },
+    {
+      "path": "./projects/ui/tsconfig.lib.json"
+    },
+    {
+      "path": "./projects/ui/tsconfig.spec.json"
+    }
+  ]
+}
