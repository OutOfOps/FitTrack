const registries = new Map();

class Transaction {
  table() {
    throw new Error('Transactions are not supported in this mock.');
  }
}

class Table {
  constructor(store) {
    this._store = store;
  }

  async put(value) {
    if (!value || typeof value.id === 'undefined') {
      throw new Error('Dexie mock requires values to have an id property.');
    }
    this._store.set(value.id, value);
    return value.id;
  }

  async bulkAdd(values) {
    for (const value of values) {
      await this.put(value);
    }
  }

  where(field) {
    return {
      equals: (needle) => ({
        toArray: async () =>
          Array.from(this._store.values()).filter((entry) => entry && entry[field] === needle),
      }),
    };
  }

  async delete(key) {
    this._store.delete(key);
  }

  async toArray() {
    return Array.from(this._store.values());
  }
}

class Dexie {
  constructor(name) {
    this.name = name;
    if (!registries.has(name)) {
      registries.set(name, new Map());
    }
    this._stores = registries.get(name);
    this._versions = new Map();
  }

  version(versionNumber) {
    const api = {
      stores: (schema) => {
        this._versions.set(versionNumber, { schema, upgrade: null });
        Object.keys(schema).forEach((tableName) => {
          if (!this._stores.has(tableName)) {
            this._stores.set(tableName, new Map());
          }
          const table = new Table(this._stores.get(tableName));
          Object.defineProperty(this, tableName, {
            value: table,
            enumerable: true,
            configurable: true,
            writable: false,
          });
        });
        return api;
      },
      upgrade: (callback) => {
        const meta = this._versions.get(versionNumber);
        if (meta) {
          meta.upgrade = callback;
        }
        return api;
      },
    };
    return api;
  }

  async delete() {
    return Dexie.delete(this.name);
  }

  static async delete(name) {
    registries.delete(name);
  }
}

module.exports = Dexie;
module.exports.default = Dexie;
module.exports.Table = Table;
module.exports.Transaction = Transaction;
